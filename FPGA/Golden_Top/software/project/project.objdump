
project.elf:     file format elf32-littlenios2
project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002004 memsz 0x00002004 flags r-x
    LOAD off    0x00003024 vaddr 0x00012024 paddr 0x000121b8 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags rw-
    LOAD off    0x0000334c vaddr 0x0001234c paddr 0x0001234c align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001e00  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a4  00011f80  00011f80  00002f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000194  00012024  000121b8  00003024  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  0001234c  0001234c  0000334c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00012478  00012478  000031b8  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005e0  00000000  00000000  000031e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019013  00000000  00000000  000037c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005899  00000000  00000000  0001c7db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000063c8  00000000  00000000  00022074  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008b0  00000000  00000000  0002843c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002413  00000000  00000000  00028cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002e93  00000000  00000000  0002b0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0002df94  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000500  00000000  00000000  0002dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002ff2b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002ff2e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002ff31  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002ff32  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0002ff33  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0002ff3c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0002ff45  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0002ff4e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  0002ff60  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011f80 l    d  .rodata	00000000 .rodata
00012024 l    d  .rwdata	00000000 .rwdata
0001234c l    d  .bss	00000000 .bss
00012478 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/intelFPGA_lite/Project/Golden_Top/software/project_bsp/obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00011feb l     O .rodata	0000002b CSWTCH.31
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 asprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_str_mbf.c
00000000 l    df *ABS*	00000000 impure.c
00012024 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000111f4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012198 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012108 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011df0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00012374 g     O .bss	00000004 alt_instruction_exception_handler
000117c8 g     F .text	0000001c _malloc_usable_size_r
00011984 g     F .text	0000002c alt_main
0001023c g     F .text	00000010 led_write
00012378 g     O .bss	00000100 alt_irq
000121b8 g       *ABS*	00000000 __flash_rwdata_start
00012478 g       *ABS*	00000000 __alt_heap_start
000119b4 g     F .text	00000004 __malloc_unlock
00010e10 g     F .text	00000060 memmove
000101bc g     F .text	00000080 sys_timer_isr
00010750 g     F .text	00000048 read_chars
00011b44 g     F .text	00000038 alt_putstr
0001219c g     O .rwdata	00000004 jtag_uart
00011ed8 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011cd8 g     F .text	0000005c alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012360 g     O .bss	00000004 errno
0001236c g     O .bss	00000004 alt_argv
0001a18c g       *ABS*	00000000 _gp
000106b0 g     F .text	000000a0 generate_text
00012134 g     O .rwdata	00000030 alt_fd_list
00011e64 g     F .text	00000070 alt_find_dev
000117a0 g     F .text	00000028 memcpy
00011ee0 g     F .text	00000070 alt_exception_cause_generated_bad_addr
00011bf8 g     F .text	00000058 altera_avalon_jtag_uart_read
00010df0 g     F .text	00000010 malloc
00010afc g     F .text	00000064 .hidden __udivsi3
000111ac g     F .text	00000048 _sbrk_r
000121a0 g     O .rwdata	00000004 alt_max_fd
00011840 g     F .text	00000090 alt_irq_register
0001218c g     O .rwdata	00000004 _global_impure_ptr
000110f4 g     F .text	000000b8 _realloc_r
00012478 g       *ABS*	00000000 __bss_end
00011800 g     F .text	00000040 alt_getchar
00012364 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00012164 g     O .rwdata	00000028 alt_dev_null
00011dec g     F .text	00000004 alt_dcache_flush_all
00010678 g     F .text	00000038 print_text
000121b8 g       *ABS*	00000000 __ram_rwdata_end
00010280 g     F .text	00000054 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000121a4 g     O .rwdata	00000008 alt_dev_list
00012024 g       *ABS*	00000000 __ram_rodata_end
00010ce4 g     F .text	0000010c __sfvwrite_small_str_mbf
00012350 g     O .bss	00000001 led
00010b60 g     F .text	0000005c .hidden __umodsi3
00012478 g       *ABS*	00000000 end
000102d4 g     F .text	000003a4 moving_meanF
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011c50 g     F .text	00000030 altera_avalon_jtag_uart_write
00010be4 g     F .text	00000078 _asprintf_r
00010e90 g     F .text	00000100 _free_r
000119b8 g     F .text	00000140 alt_printf
00010180 g     F .text	0000003c _start
00012354 g     O .bss	00000004 level
00011be8 g     F .text	00000010 alt_sys_init
00011c88 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010bbc g     F .text	00000028 .hidden __mulsi3
00012024 g       *ABS*	00000000 __ram_rwdata_start
00011f80 g       *ABS*	00000000 __ram_rodata_start
00011d34 g     F .text	0000005c alt_up_accelerometer_spi_read_y_axis
00011f50 g     F .text	00000030 memcmp
00012478 g       *ABS*	00000000 __alt_stack_base
00011df8 g     F .text	0000006c alt_dev_llist_insert
000119b0 g     F .text	00000004 __malloc_lock
00011b7c g     F .text	0000004c sbrk
00011260 g     F .text	00000528 ___svfprintf_internal_r
0001234c g       *ABS*	00000000 __bss_start
00010e70 g     F .text	00000020 memset
000107c0 g     F .text	00000248 main
00012368 g     O .bss	00000004 alt_envp
00020000 g       *ABS*	00000000 __alt_heap_limit
00010f90 g     F .text	00000164 _malloc_r
000121b4 g     O .rwdata	00000004 alt_errno
00010a08 g     F .text	00000080 .hidden __divsi3
00011f80 g       *ABS*	00000000 __flash_rodata_start
00011bc8 g     F .text	00000020 alt_irq_init
00010c5c g     F .text	00000088 asprintf
00012190 g     O .rwdata	00000004 _impure_ptr
00012370 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
0001234c g     O .bss	00000001 pwm
000121ac g     O .rwdata	00000008 alt_fs_list
00011788 g     F .text	00000018 __vfprintf_internal_unused
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011c80 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
000121b8 g       *ABS*	00000000 _edata
00012478 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010a88 g     F .text	00000074 .hidden __modsi3
00011d90 g     F .text	0000005c alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001024c g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00011c9c g     F .text	00000020 alt_up_accelerometer_spi_read
00011cbc g     F .text	0000001c alt_up_accelerometer_spi_write
00010798 g     F .text	00000028 getBin
000117e4 g     F .text	0000001c strlen
00011af8 g     F .text	0000004c alt_putchar
00012358 g     O .bss	00000004 __malloc_sbrk_start
00011ed4 g     F .text	00000004 alt_icache_flush_all
00012194 g     O .rwdata	00000004 alt_priority_mask
0001235c g     O .bss	00000004 __malloc_free_list
000118d0 g     F .text	000000b4 alt_load
00010e00 g     F .text	00000010 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	8408de04 	addi	r16,r16,9080
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
      mask <<= 1;
   10150:	1004907a 	slli	r2,r2,1
      i++;
   10154:	29400044 	addi	r5,r5,1
      if (active & mask)
   10158:	003ff006 	br	1011c <alt_irq_handler+0x20>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a07a17 	ldw	r2,-32280(gp)
{
   10160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
   10164:	10000326 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a86314 	ori	gp,gp,41356
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1088d314 	ori	r2,r2,9036

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c91e14 	ori	r3,r3,9336

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00118d00 	call	118d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00119840 	call	11984 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <alt_after_alt_main>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10040035 	stwio	zero,4096(r2)

    if (pwm < abs(level)) {
   101c4:	d0e07217 	ldw	r3,-32312(gp)
   101c8:	d1207007 	ldb	r4,-32320(gp)
   101cc:	1805883a 	mov	r2,r3
   101d0:	1800010e 	bge	r3,zero,101d8 <sys_timer_isr+0x1c>
   101d4:	00c5c83a 	sub	r2,zero,r3
   101d8:	2080110e 	bge	r4,r2,10220 <sys_timer_isr+0x64>

        if (level < 0) {
   101dc:	d0a07103 	ldbu	r2,-32316(gp)
   101e0:	18000c0e 	bge	r3,zero,10214 <sys_timer_isr+0x58>
            led_write(led << 1);
   101e4:	1004907a 	slli	r2,r2,1
   101e8:	10803fcc 	andi	r2,r2,255
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	00c000b4 	movhi	r3,2
   101f0:	18842835 	stwio	r2,4256(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   101f4:	d0a07003 	ldbu	r2,-32320(gp)
   101f8:	10c03fcc 	andi	r3,r2,255
   101fc:	18c0201c 	xori	r3,r3,128
   10200:	18ffe004 	addi	r3,r3,-128
   10204:	18c00450 	cmplti	r3,r3,17
   10208:	1800091e 	bne	r3,zero,10230 <sys_timer_isr+0x74>
        pwm = 0;
   1020c:	d0207005 	stb	zero,-32320(gp)
   10210:	f800283a 	ret
            led_write(led >> 1);
   10214:	10803fcc 	andi	r2,r2,255
   10218:	1004d07a 	srli	r2,r2,1
   1021c:	003ff306 	br	101ec <sys_timer_isr+0x30>
        led_write(led);
   10220:	d0e07103 	ldbu	r3,-32316(gp)
    IOWR(LED_BASE, 0, led_pattern);
   10224:	008000b4 	movhi	r2,2
   10228:	10c42835 	stwio	r3,4256(r2)
}
   1022c:	003ff106 	br	101f4 <sys_timer_isr+0x38>
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a07005 	stb	r2,-32320(gp)
    }

}
   10238:	f800283a 	ret

0001023c <led_write>:
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	21003fcc 	andi	r4,r4,255
   10240:	008000b4 	movhi	r2,2
   10244:	11042835 	stwio	r4,4256(r2)
}
   10248:	f800283a 	ret

0001024c <convert_read>:
    acc_read += OFFSET;
   1024c:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
   10250:	2007d1ba 	srai	r3,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10254:	2009d07a 	srai	r4,r4,1
    * led = (8 >> val) | (8 << (8 - val));
   10258:	19c001cc 	andi	r7,r3,7
   1025c:	00c00204 	movi	r3,8
   10260:	19c5c83a 	sub	r2,r3,r7
   10264:	1884983a 	sll	r2,r3,r2
   10268:	19c7d83a 	sra	r3,r3,r7
    * level = (acc_read >> 1) & 0x1f;
   1026c:	210007cc 	andi	r4,r4,31
    * led = (8 >> val) | (8 << (8 - val));
   10270:	10c4b03a 	or	r2,r2,r3
   10274:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   10278:	29000015 	stw	r4,0(r5)
}
   1027c:	f800283a 	ret

00010280 <timer_init>:


void timer_init(void * isr) {
   10280:	deffff04 	addi	sp,sp,-4
   10284:	dfc00015 	stw	ra,0(sp)
   10288:	200d883a 	mov	r6,r4

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1028c:	00c000c4 	movi	r3,3
   10290:	008000b4 	movhi	r2,2
   10294:	10c40135 	stwio	r3,4100(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10298:	0005883a 	mov	r2,zero
   1029c:	00c000b4 	movhi	r3,2
   102a0:	18840035 	stwio	r2,4096(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102a4:	01024004 	movi	r4,2304
   102a8:	19040235 	stwio	r4,4104(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102ac:	18840335 	stwio	r2,4108(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   102b0:	000b883a 	mov	r5,zero
   102b4:	01000044 	movi	r4,1
   102b8:	00118400 	call	11840 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   102bc:	00c001c4 	movi	r3,7
   102c0:	008000b4 	movhi	r2,2
   102c4:	10c40135 	stwio	r3,4100(r2)

}
   102c8:	dfc00017 	ldw	ra,0(sp)
   102cc:	dec00104 	addi	sp,sp,4
   102d0:	f800283a 	ret

000102d4 <moving_meanF>:

void moving_meanF(alt_32 *data,alt_32 *result,alt_32 x_read){
   102d4:	defffb04 	addi	sp,sp,-20
   102d8:	dc400115 	stw	r17,4(sp)
   102dc:	2023883a 	mov	r17,r4
	alt_printf("raw data: %x\n", x_read);
   102e0:	01000074 	movhi	r4,1
void moving_meanF(alt_32 *data,alt_32 *result,alt_32 x_read){
   102e4:	dc800215 	stw	r18,8(sp)
	alt_printf("raw data: %x\n", x_read);
   102e8:	2107e004 	addi	r4,r4,8064
void moving_meanF(alt_32 *data,alt_32 *result,alt_32 x_read){
   102ec:	2825883a 	mov	r18,r5
	alt_printf("raw data: %x\n", x_read);
   102f0:	300b883a 	mov	r5,r6
void moving_meanF(alt_32 *data,alt_32 *result,alt_32 x_read){
   102f4:	dcc00315 	stw	r19,12(sp)
   102f8:	dfc00415 	stw	ra,16(sp)
   102fc:	dc000015 	stw	r16,0(sp)
   10300:	3027883a 	mov	r19,r6
	alt_printf("raw data: %x\n", x_read);
   10304:	00119b80 	call	119b8 <alt_printf>
	for(int i = 49; i > 0; i--){
   10308:	88803104 	addi	r2,r17,196
		data[i] = data[i-1];
   1030c:	10ffff17 	ldw	r3,-4(r2)
   10310:	10bfff04 	addi	r2,r2,-4
   10314:	10c00115 	stw	r3,4(r2)
	for(int i = 49; i > 0; i--){
   10318:	88bffc1e 	bne	r17,r2,1030c <moving_meanF+0x38>
	}
	data[0] = x_read;
	*result = (46 * data[0] +
			   74 * data[1] +
   1031c:	89000117 	ldw	r4,4(r17)
	data[0] = x_read;
   10320:	8cc00015 	stw	r19,0(r17)
			   74 * data[1] +
   10324:	01401284 	movi	r5,74
   10328:	0010bbc0 	call	10bbc <__mulsi3>
	*result = (46 * data[0] +
   1032c:	9809883a 	mov	r4,r19
   10330:	01400b84 	movi	r5,46
			   74 * data[1] +
   10334:	1021883a 	mov	r16,r2
	*result = (46 * data[0] +
   10338:	0010bbc0 	call	10bbc <__mulsi3>
   1033c:	80a1883a 	add	r16,r16,r2
			   -24 * data[2] +
   10340:	88800217 	ldw	r2,8(r17)
			   -71 * data[3] +
   10344:	89000317 	ldw	r4,12(r17)
   10348:	017fee44 	movi	r5,-71
			   -24 * data[2] +
   1034c:	100690ba 	slli	r3,r2,2
   10350:	10c5c83a 	sub	r2,r2,r3
   10354:	100490fa 	slli	r2,r2,3
			   74 * data[1] +
   10358:	80a1883a 	add	r16,r16,r2
			   -71 * data[3] +
   1035c:	0010bbc0 	call	10bbc <__mulsi3>
			   33 * data[4] +
   10360:	88c00417 	ldw	r3,16(r17)
			   -24 * data[2] +
   10364:	80a1883a 	add	r16,r16,r2
			   1 * data[5] +
			   -94 * data[6] +
   10368:	89000617 	ldw	r4,24(r17)
			   33 * data[4] +
   1036c:	1804917a 	slli	r2,r3,5
			   -94 * data[6] +
   10370:	017fe884 	movi	r5,-94
			   33 * data[4] +
   10374:	10c5883a 	add	r2,r2,r3
			   -71 * data[3] +
   10378:	80a1883a 	add	r16,r16,r2
			   33 * data[4] +
   1037c:	88800517 	ldw	r2,20(r17)
   10380:	80a1883a 	add	r16,r16,r2
			   -94 * data[6] +
   10384:	0010bbc0 	call	10bbc <__mulsi3>
			   40 * data[7] +
   10388:	88c00717 	ldw	r3,28(r17)
			   1 * data[5] +
   1038c:	80a1883a 	add	r16,r16,r2
			   44 * data[8] +
   10390:	89000817 	ldw	r4,32(r17)
			   40 * data[7] +
   10394:	180490ba 	slli	r2,r3,2
			   44 * data[8] +
   10398:	01400b04 	movi	r5,44
			   40 * data[7] +
   1039c:	10c5883a 	add	r2,r2,r3
   103a0:	100490fa 	slli	r2,r2,3
			   -94 * data[6] +
   103a4:	80a1883a 	add	r16,r16,r2
			   44 * data[8] +
   103a8:	0010bbc0 	call	10bbc <__mulsi3>
			   -133 * data[9] +
   103ac:	89000917 	ldw	r4,36(r17)
   103b0:	017fdec4 	movi	r5,-133
			   40 * data[7] +
   103b4:	80a1883a 	add	r16,r16,r2
			   -133 * data[9] +
   103b8:	0010bbc0 	call	10bbc <__mulsi3>
			   30 * data[10] +
   103bc:	88c00a17 	ldw	r3,40(r17)
			   44 * data[8] +
   103c0:	80a1883a 	add	r16,r16,r2
			   114 * data[11] +
   103c4:	89000b17 	ldw	r4,44(r17)
			   30 * data[10] +
   103c8:	1804913a 	slli	r2,r3,4
			   114 * data[11] +
   103cc:	01401c84 	movi	r5,114
			   30 * data[10] +
   103d0:	10c5c83a 	sub	r2,r2,r3
   103d4:	1004907a 	slli	r2,r2,1
			   -133 * data[9] +
   103d8:	80a1883a 	add	r16,r16,r2
			   114 * data[11] +
   103dc:	0010bbc0 	call	10bbc <__mulsi3>
			   -179 * data[12] +
   103e0:	89000c17 	ldw	r4,48(r17)
   103e4:	017fd344 	movi	r5,-179
			   30 * data[10] +
   103e8:	80a1883a 	add	r16,r16,r2
			   -179 * data[12] +
   103ec:	0010bbc0 	call	10bbc <__mulsi3>
			   -11 * data[13] +
   103f0:	89000d17 	ldw	r4,52(r17)
   103f4:	017ffd44 	movi	r5,-11
			   114 * data[11] +
   103f8:	80a1883a 	add	r16,r16,r2
			   -11 * data[13] +
   103fc:	0010bbc0 	call	10bbc <__mulsi3>
			   223 * data[14] +
   10400:	88c00e17 	ldw	r3,56(r17)
			   -179 * data[12] +
   10404:	80a1883a 	add	r16,r16,r2
			   -225 * data[15] +
   10408:	89000f17 	ldw	r4,60(r17)
			   223 * data[14] +
   1040c:	180490fa 	slli	r2,r3,3
			   -225 * data[15] +
   10410:	017fc7c4 	movi	r5,-225
			   223 * data[14] +
   10414:	10c5c83a 	sub	r2,r2,r3
   10418:	1004917a 	slli	r2,r2,5
   1041c:	10c5c83a 	sub	r2,r2,r3
			   -11 * data[13] +
   10420:	80a1883a 	add	r16,r16,r2
			   -225 * data[15] +
   10424:	0010bbc0 	call	10bbc <__mulsi3>
			   -109 * data[16] +
   10428:	89001017 	ldw	r4,64(r17)
   1042c:	017fe4c4 	movi	r5,-109
			   223 * data[14] +
   10430:	80a1883a 	add	r16,r16,r2
			   -109 * data[16] +
   10434:	0010bbc0 	call	10bbc <__mulsi3>
			   396 * data[17] +
   10438:	89001117 	ldw	r4,68(r17)
   1043c:	01406304 	movi	r5,396
			   -225 * data[15] +
   10440:	80a1883a 	add	r16,r16,r2
			   396 * data[17] +
   10444:	0010bbc0 	call	10bbc <__mulsi3>
			   -263 * data[18] +
   10448:	89001217 	ldw	r4,72(r17)
   1044c:	017fbe44 	movi	r5,-263
			   -109 * data[16] +
   10450:	80a1883a 	add	r16,r16,r2
			   -263 * data[18] +
   10454:	0010bbc0 	call	10bbc <__mulsi3>
			   -348 * data[19] +
   10458:	89001317 	ldw	r4,76(r17)
   1045c:	017fa904 	movi	r5,-348
			   396 * data[17] +
   10460:	80a1883a 	add	r16,r16,r2
			   -348 * data[19] +
   10464:	0010bbc0 	call	10bbc <__mulsi3>
			   752 * data[20] +
   10468:	89001417 	ldw	r4,80(r17)
   1046c:	0140bc04 	movi	r5,752
			   -263 * data[18] +
   10470:	80a1883a 	add	r16,r16,r2
			   752 * data[20] +
   10474:	0010bbc0 	call	10bbc <__mulsi3>
			   -289 * data[21] +
   10478:	89001517 	ldw	r4,84(r17)
   1047c:	017fb7c4 	movi	r5,-289
			   -348 * data[19] +
   10480:	80a1883a 	add	r16,r16,r2
			   -289 * data[21] +
   10484:	0010bbc0 	call	10bbc <__mulsi3>
			   -1204 * data[22] +
   10488:	89001617 	ldw	r4,88(r17)
   1048c:	017ed304 	movi	r5,-1204
			   752 * data[20] +
   10490:	80a1883a 	add	r16,r16,r2
			   -1204 * data[22] +
   10494:	0010bbc0 	call	10bbc <__mulsi3>
			   2879 * data[23] +
   10498:	89001717 	ldw	r4,92(r17)
   1049c:	0142cfc4 	movi	r5,2879
			   -289 * data[21] +
   104a0:	80a1883a 	add	r16,r16,r2
			   2879 * data[23] +
   104a4:	0010bbc0 	call	10bbc <__mulsi3>
			   6369 * data[24] +
   104a8:	89001817 	ldw	r4,96(r17)
   104ac:	01463844 	movi	r5,6369
			   -1204 * data[22] +
   104b0:	80a1883a 	add	r16,r16,r2
			   6369 * data[24] +
   104b4:	0010bbc0 	call	10bbc <__mulsi3>
			   2879 * data[25] +
   104b8:	89001917 	ldw	r4,100(r17)
   104bc:	0142cfc4 	movi	r5,2879
			   2879 * data[23] +
   104c0:	80a1883a 	add	r16,r16,r2
			   2879 * data[25] +
   104c4:	0010bbc0 	call	10bbc <__mulsi3>
			   -1204 * data[26] +
   104c8:	89001a17 	ldw	r4,104(r17)
   104cc:	017ed304 	movi	r5,-1204
			   6369 * data[24] +
   104d0:	80a1883a 	add	r16,r16,r2
			   -1204 * data[26] +
   104d4:	0010bbc0 	call	10bbc <__mulsi3>
			   -289 * data[27] +
   104d8:	89001b17 	ldw	r4,108(r17)
   104dc:	017fb7c4 	movi	r5,-289
			   2879 * data[25] +
   104e0:	80a1883a 	add	r16,r16,r2
			   -289 * data[27] +
   104e4:	0010bbc0 	call	10bbc <__mulsi3>
			   752 * data[28] +
   104e8:	89001c17 	ldw	r4,112(r17)
   104ec:	0140bc04 	movi	r5,752
			   -1204 * data[26] +
   104f0:	80a1883a 	add	r16,r16,r2
			   752 * data[28] +
   104f4:	0010bbc0 	call	10bbc <__mulsi3>
			   -338 * data[29] +
   104f8:	89001d17 	ldw	r4,116(r17)
   104fc:	017fab84 	movi	r5,-338
			   -289 * data[27] +
   10500:	80a1883a 	add	r16,r16,r2
			   -338 * data[29] +
   10504:	0010bbc0 	call	10bbc <__mulsi3>
			   -263 * data[30] +
   10508:	89001e17 	ldw	r4,120(r17)
   1050c:	017fbe44 	movi	r5,-263
			   752 * data[28] +
   10510:	80a1883a 	add	r16,r16,r2
			   -263 * data[30] +
   10514:	0010bbc0 	call	10bbc <__mulsi3>
			   396 * data[31] +
   10518:	89001f17 	ldw	r4,124(r17)
   1051c:	01406304 	movi	r5,396
			   -338 * data[29] +
   10520:	80a1883a 	add	r16,r16,r2
			   396 * data[31] +
   10524:	0010bbc0 	call	10bbc <__mulsi3>
			   -109 * data[32] +
   10528:	89002017 	ldw	r4,128(r17)
   1052c:	017fe4c4 	movi	r5,-109
			   -263 * data[30] +
   10530:	80a1883a 	add	r16,r16,r2
			   -109 * data[32] +
   10534:	0010bbc0 	call	10bbc <__mulsi3>
			   -225 * data[33] +
   10538:	89002117 	ldw	r4,132(r17)
   1053c:	017fc7c4 	movi	r5,-225
			   396 * data[31] +
   10540:	80a1883a 	add	r16,r16,r2
			   -225 * data[33] +
   10544:	0010bbc0 	call	10bbc <__mulsi3>
			   223 * data[34] +
   10548:	88c02217 	ldw	r3,136(r17)
			   -109 * data[32] +
   1054c:	80a1883a 	add	r16,r16,r2
			   -11 * data[35] +
   10550:	89002317 	ldw	r4,140(r17)
			   223 * data[34] +
   10554:	180490fa 	slli	r2,r3,3
			   -11 * data[35] +
   10558:	017ffd44 	movi	r5,-11
			   223 * data[34] +
   1055c:	10c5c83a 	sub	r2,r2,r3
   10560:	1004917a 	slli	r2,r2,5
   10564:	10c5c83a 	sub	r2,r2,r3
			   -225 * data[33] +
   10568:	80a1883a 	add	r16,r16,r2
			   -11 * data[35] +
   1056c:	0010bbc0 	call	10bbc <__mulsi3>
			   -179 * data[36] +
   10570:	89002417 	ldw	r4,144(r17)
   10574:	017fd344 	movi	r5,-179
			   223 * data[34] +
   10578:	80a1883a 	add	r16,r16,r2
			   -179 * data[36] +
   1057c:	0010bbc0 	call	10bbc <__mulsi3>
			   114 * data[37] +
   10580:	89002517 	ldw	r4,148(r17)
   10584:	01401c84 	movi	r5,114
			   -11 * data[35] +
   10588:	80a1883a 	add	r16,r16,r2
			   114 * data[37] +
   1058c:	0010bbc0 	call	10bbc <__mulsi3>
			   30 * data[38] +
   10590:	88c02617 	ldw	r3,152(r17)
			   -179 * data[36] +
   10594:	80a1883a 	add	r16,r16,r2
			   133 * data[39] +
			   44 * data[40] +
   10598:	89002817 	ldw	r4,160(r17)
			   30 * data[38] +
   1059c:	1804913a 	slli	r2,r3,4
			   44 * data[40] +
   105a0:	01400b04 	movi	r5,44
			   30 * data[38] +
   105a4:	10c5c83a 	sub	r2,r2,r3
   105a8:	1004907a 	slli	r2,r2,1
			   133 * data[39] +
   105ac:	88c02717 	ldw	r3,156(r17)
			   114 * data[37] +
   105b0:	80a1883a 	add	r16,r16,r2
			   133 * data[39] +
   105b4:	1804917a 	slli	r2,r3,5
   105b8:	10c5883a 	add	r2,r2,r3
   105bc:	100490ba 	slli	r2,r2,2
   105c0:	10c5883a 	add	r2,r2,r3
			   30 * data[38] +
   105c4:	80a1883a 	add	r16,r16,r2
			   44 * data[40] +
   105c8:	0010bbc0 	call	10bbc <__mulsi3>
			   40 * data[41] +
   105cc:	88c02917 	ldw	r3,164(r17)
			   133 * data[39] +
   105d0:	80a1883a 	add	r16,r16,r2
			   -94 * data[42] +
   105d4:	89002a17 	ldw	r4,168(r17)
			   40 * data[41] +
   105d8:	180490ba 	slli	r2,r3,2
			   -94 * data[42] +
   105dc:	017fe884 	movi	r5,-94
			   40 * data[41] +
   105e0:	10c5883a 	add	r2,r2,r3
   105e4:	100490fa 	slli	r2,r2,3
			   44 * data[40] +
   105e8:	80a1883a 	add	r16,r16,r2
			   -94 * data[42] +
   105ec:	0010bbc0 	call	10bbc <__mulsi3>
			   1 * data[43] +
			   33 * data[44] +
   105f0:	88c02c17 	ldw	r3,176(r17)
			   40 * data[41] +
   105f4:	80a1883a 	add	r16,r16,r2
			   -94 * data[42] +
   105f8:	88802b17 	ldw	r2,172(r17)
			   -71 * data[45] +
   105fc:	89002d17 	ldw	r4,180(r17)
   10600:	017fee44 	movi	r5,-71
			   -94 * data[42] +
   10604:	80a1883a 	add	r16,r16,r2
			   33 * data[44] +
   10608:	1804917a 	slli	r2,r3,5
   1060c:	10c5883a 	add	r2,r2,r3
			   1 * data[43] +
   10610:	80a1883a 	add	r16,r16,r2
			   -71 * data[45] +
   10614:	0010bbc0 	call	10bbc <__mulsi3>
			   33 * data[44] +
   10618:	80a1883a 	add	r16,r16,r2
			   -24 * data[46] +
   1061c:	88802e17 	ldw	r2,184(r17)
			   74 * data[47] +
   10620:	89002f17 	ldw	r4,188(r17)
   10624:	01401284 	movi	r5,74
			   -24 * data[46] +
   10628:	100690ba 	slli	r3,r2,2
   1062c:	10c5c83a 	sub	r2,r2,r3
   10630:	100490fa 	slli	r2,r2,3
			   -71 * data[45] +
   10634:	80a1883a 	add	r16,r16,r2
			   74 * data[47] +
   10638:	0010bbc0 	call	10bbc <__mulsi3>
			   46 * data[48] +
   1063c:	89003017 	ldw	r4,192(r17)
   10640:	01400b84 	movi	r5,46
			   -24 * data[46] +
   10644:	80a1883a 	add	r16,r16,r2
			   46 * data[48] +
   10648:	0010bbc0 	call	10bbc <__mulsi3>
			   0 * data[49])/10000;
   1064c:	0149c404 	movi	r5,10000
   10650:	8089883a 	add	r4,r16,r2
   10654:	0010a080 	call	10a08 <__divsi3>
	*result = (46 * data[0] +
   10658:	90800015 	stw	r2,0(r18)

}
   1065c:	dfc00417 	ldw	ra,16(sp)
   10660:	dcc00317 	ldw	r19,12(sp)
   10664:	dc800217 	ldw	r18,8(sp)
   10668:	dc400117 	ldw	r17,4(sp)
   1066c:	dc000017 	ldw	r16,0(sp)
   10670:	dec00504 	addi	sp,sp,20
   10674:	f800283a 	ret

00010678 <print_text>:


void print_text(alt_32 x_read) {
   10678:	defffe04 	addi	sp,sp,-8
	char *printMsg;
	asprintf(&printMsg, "<--> Pisition: %x <--> \n", x_read); 	// Print out the strings
   1067c:	01400074 	movhi	r5,1
   10680:	200d883a 	mov	r6,r4
   10684:	2947e404 	addi	r5,r5,8080
   10688:	d809883a 	mov	r4,sp
void print_text(alt_32 x_read) {
   1068c:	dfc00115 	stw	ra,4(sp)
	asprintf(&printMsg, "<--> Pisition: %x <--> \n", x_read); 	// Print out the strings
   10690:	0010c5c0 	call	10c5c <asprintf>
	alt_putstr(printMsg);
   10694:	d9000017 	ldw	r4,0(sp)
   10698:	0011b440 	call	11b44 <alt_putstr>
	free(printMsg);
   1069c:	d9000017 	ldw	r4,0(sp)
   106a0:	0010e000 	call	10e00 <free>
	//memset(x_read, 0, 2*CHARLIM);								// Empty the text buffer for next input
}
   106a4:	dfc00117 	ldw	ra,4(sp)
   106a8:	dec00204 	addi	sp,sp,8
   106ac:	f800283a 	ret

000106b0 <generate_text>:

char generate_text(char curr, int *length, char *text, int *running) {
   106b0:	2005883a 	mov	r2,r4
	if(curr == '\n') return curr;								// If the line is empty, return nothing.
   106b4:	21003fcc 	andi	r4,r4,255
   106b8:	2100201c 	xori	r4,r4,128
   106bc:	213fe004 	addi	r4,r4,-128
   106c0:	210002a0 	cmpeqi	r4,r4,10
   106c4:	2000211e 	bne	r4,zero,1074c <generate_text+0x9c>
char generate_text(char curr, int *length, char *text, int *running) {
   106c8:	defffb04 	addi	sp,sp,-20
   106cc:	dcc00315 	stw	r19,12(sp)
   106d0:	dc800215 	stw	r18,8(sp)
   106d4:	dc400115 	stw	r17,4(sp)
   106d8:	dc000015 	stw	r16,0(sp)
   106dc:	dfc00415 	stw	ra,16(sp)
   106e0:	2823883a 	mov	r17,r5
   106e4:	3025883a 	mov	r18,r6
   106e8:	3827883a 	mov	r19,r7
	int idx = 0;										// Keep track of how many characters have been sent down for later printing
   106ec:	0021883a 	mov	r16,zero
	char newCurr = curr;

	while (newCurr != EOF && newCurr != '\n'){						// Keep reading characters until we get to the end of the line
   106f0:	10c03fcc 	andi	r3,r2,255
   106f4:	18c0201c 	xori	r3,r3,128
   106f8:	18ffe004 	addi	r3,r3,-128
   106fc:	193fffe0 	cmpeqi	r4,r3,-1
   10700:	2000021e 	bne	r4,zero,1070c <generate_text+0x5c>
   10704:	19000298 	cmpnei	r4,r3,10
   10708:	2000081e 	bne	r4,zero,1072c <generate_text+0x7c>
		if (newCurr == QUITLETTER) { *running = 0; }					// If quitting letter is encountered, setting running to 0
		text[idx] = newCurr;								// Add the next letter to the text buffer
		idx++;										// Keep track of the number of characters read
		newCurr = alt_getchar();							// Get the next character
	}
	*length = idx;
   1070c:	8c000015 	stw	r16,0(r17)

	return newCurr;
}
   10710:	dfc00417 	ldw	ra,16(sp)
   10714:	dcc00317 	ldw	r19,12(sp)
   10718:	dc800217 	ldw	r18,8(sp)
   1071c:	dc400117 	ldw	r17,4(sp)
   10720:	dc000017 	ldw	r16,0(sp)
   10724:	dec00504 	addi	sp,sp,20
   10728:	f800283a 	ret
		if (newCurr == QUITLETTER) { *running = 0; }					// If quitting letter is encountered, setting running to 0
   1072c:	18c01f98 	cmpnei	r3,r3,126
   10730:	1800011e 	bne	r3,zero,10738 <generate_text+0x88>
   10734:	98000015 	stw	zero,0(r19)
		text[idx] = newCurr;								// Add the next letter to the text buffer
   10738:	9407883a 	add	r3,r18,r16
   1073c:	18800005 	stb	r2,0(r3)
		idx++;										// Keep track of the number of characters read
   10740:	84000044 	addi	r16,r16,1
		newCurr = alt_getchar();							// Get the next character
   10744:	00118000 	call	11800 <alt_getchar>
   10748:	003fe906 	br	106f0 <generate_text+0x40>
}
   1074c:	f800283a 	ret

00010750 <read_chars>:

int read_chars() {
   10750:	deffdd04 	addi	sp,sp,-140
	char text[2*CHARLIM];									// The buffer for the printing text
	char prevLetter = '!';
	int length = 0;
	int running = 1;
   10754:	00800044 	movi	r2,1
int read_chars() {
   10758:	dfc02215 	stw	ra,136(sp)
	int length = 0;
   1075c:	d8000015 	stw	zero,0(sp)
	int running = 1;
   10760:	d8800115 	stw	r2,4(sp)

	while (running) {									// Keep running until QUITLETTER is encountered
		prevLetter = alt_getchar();							// Extract the first character (and create a hold until one arrives)
   10764:	00118000 	call	11800 <alt_getchar>
		prevLetter = generate_text(prevLetter, &length, text, &running);		// Process input text						// Print input text
   10768:	11003fcc 	andi	r4,r2,255
   1076c:	2100201c 	xori	r4,r4,128
   10770:	d9c00104 	addi	r7,sp,4
   10774:	d9800204 	addi	r6,sp,8
   10778:	d80b883a 	mov	r5,sp
   1077c:	213fe004 	addi	r4,r4,-128
   10780:	00106b00 	call	106b0 <generate_text>
	while (running) {									// Keep running until QUITLETTER is encountered
   10784:	d8800117 	ldw	r2,4(sp)
   10788:	103ff61e 	bne	r2,zero,10764 <read_chars+0x14>
	}

	return 0;
}
   1078c:	dfc02217 	ldw	ra,136(sp)
   10790:	dec02304 	addi	sp,sp,140
   10794:	f800283a 	ret

00010798 <getBin>:
    int getBin(char letter){
    	/*Based on the character entered, we convert to binary so the 7-segment knows which lights to turn on.
    	The 7-segment has inverted logic so a 0 means the light is on and a 1 means the light is off.
    	The rightmost bit starts the index at HEX#[0], and the leftmost bit is HEX#[6], the pattern
    	for the 7-segment is shown in the DE0_C5 User Manual*/
    	switch(letter){
   10798:	213ff404 	addi	r4,r4,-48
   1079c:	21003fcc 	andi	r4,r4,255
   107a0:	20800ae8 	cmpgeui	r2,r4,43
   107a4:	1000041e 	bne	r2,zero,107b8 <getBin+0x20>
   107a8:	00800074 	movhi	r2,1
   107ac:	2085883a 	add	r2,r4,r2
   107b0:	1087fac7 	ldb	r2,8171(r2)
   107b4:	f800283a 	ret
   107b8:	00801fc4 	movi	r2,127
    	case 'Z':
    		return 0b0100100;
    	default:
    		return 0b1111111;
    	}
    }
   107bc:	f800283a 	ret

000107c0 <main>:


int main() {
   107c0:	deffb704 	addi	sp,sp,-292
   107c4:	dfc04815 	stw	ra,288(sp)
   107c8:	dcc04715 	stw	r19,284(sp)
   107cc:	dc804615 	stw	r18,280(sp)
   107d0:	dc404515 	stw	r17,276(sp)
   107d4:	dc004415 	stw	r16,272(sp)
    while(1){
    	alt_32 x_read;
    	    alt_32 y_read;
    	    alt_up_accelerometer_spi_dev * acc_dev;
    	    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   107d8:	01000074 	movhi	r4,1
   107dc:	2107eb04 	addi	r4,r4,8108
   107e0:	0011c800 	call	11c80 <alt_up_accelerometer_spi_open_dev>
    	    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   107e4:	10008026 	beq	r2,zero,109e8 <main+0x228>
    	        return 1;
    	    }
    	alt_printf("restarted");
   107e8:	01000074 	movhi	r4,1
   107ec:	2107f104 	addi	r4,r4,8132
   107f0:	1021883a 	mov	r16,r2
   107f4:	00119b80 	call	119b8 <alt_printf>
    	char text[2*CHARLIM] = "";									// The buffer for the printing text
   107f8:	d9000504 	addi	r4,sp,20
   107fc:	01801f04 	movi	r6,124
   10800:	000b883a 	mov	r5,zero
   10804:	d8000415 	stw	zero,16(sp)
   10808:	0010e700 	call	10e70 <memset>
    	char prevLetter = '!';
    	int length = 0;
    	int running = 1;
   1080c:	00800044 	movi	r2,1
    	int length = 0;
   10810:	d8000215 	stw	zero,8(sp)
    	int running = 1;
   10814:	d8800315 	stw	r2,12(sp)
    	prevLetter = alt_getchar();							// Extract the first character (and create a hold until one arrives)
   10818:	00118000 	call	11800 <alt_getchar>
    	prevLetter = generate_text(prevLetter, &length, text, &running);
   1081c:	11003fcc 	andi	r4,r2,255
   10820:	2100201c 	xori	r4,r4,128
   10824:	d9c00304 	addi	r7,sp,12
   10828:	d9800404 	addi	r6,sp,16
   1082c:	d9400204 	addi	r5,sp,8
   10830:	213fe004 	addi	r4,r4,-128
   10834:	00106b00 	call	106b0 <generate_text>
    	alt_printf("tmp");
   10838:	01000074 	movhi	r4,1
   1083c:	2107f404 	addi	r4,r4,8144
   10840:	00119b80 	call	119b8 <alt_printf>

		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBin(text[0]));
   10844:	d9000407 	ldb	r4,16(sp)
   10848:	00107980 	call	10798 <getBin>
   1084c:	00c000b4 	movhi	r3,2
   10850:	18840835 	stwio	r2,4128(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBin(text[1]));
   10854:	d9000447 	ldb	r4,17(sp)
   10858:	00107980 	call	10798 <getBin>
   1085c:	00c000b4 	movhi	r3,2
   10860:	18840c35 	stwio	r2,4144(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBin(text[2]));
   10864:	d9000487 	ldb	r4,18(sp)
   10868:	00107980 	call	10798 <getBin>
   1086c:	00c000b4 	movhi	r3,2
   10870:	18841035 	stwio	r2,4160(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBin(text[3]));
   10874:	d90004c7 	ldb	r4,19(sp)
   10878:	00107980 	call	10798 <getBin>
   1087c:	00c000b4 	movhi	r3,2
   10880:	18841435 	stwio	r2,4176(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBin(text[4]));
   10884:	d9000507 	ldb	r4,20(sp)
   10888:	00107980 	call	10798 <getBin>
   1088c:	00c000b4 	movhi	r3,2
   10890:	18841835 	stwio	r2,4192(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBin(text[5]));
   10894:	d9000547 	ldb	r4,21(sp)
   10898:	00107980 	call	10798 <getBin>
   1089c:	00c000b4 	movhi	r3,2
   108a0:	18841c35 	stwio	r2,4208(r3)

		timer_init(sys_timer_isr);
   108a4:	01000074 	movhi	r4,1
   108a8:	21006f04 	addi	r4,r4,444
			alt_up_accelerometer_spi_read_y_axis(acc_dev, &y_read);

			button = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
			if(button == 0b0){
				con = 0;
				alt_printf("<-->%x %x %x<-->\n",x_read,y_read,button);
   108ac:	04400074 	movhi	r17,1
		timer_init(sys_timer_isr);
   108b0:	00102800 	call	10280 <timer_init>
				alt_printf("<-->%x %x %x<-->\n",x_read,y_read,button);
   108b4:	8c47f504 	addi	r17,r17,8148
			alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
   108b8:	d80b883a 	mov	r5,sp
   108bc:	8009883a 	mov	r4,r16
   108c0:	0011cd80 	call	11cd8 <alt_up_accelerometer_spi_read_x_axis>
			alt_up_accelerometer_spi_read_y_axis(acc_dev, &y_read);
   108c4:	d9400104 	addi	r5,sp,4
   108c8:	8009883a 	mov	r4,r16
   108cc:	0011d340 	call	11d34 <alt_up_accelerometer_spi_read_y_axis>
			button = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   108d0:	008000b4 	movhi	r2,2
   108d4:	14c42437 	ldwio	r19,4240(r2)
			if(button == 0b0){
   108d8:	9800411e 	bne	r19,zero,109e0 <main+0x220>
				alt_printf("<-->%x %x %x<-->\n",x_read,y_read,button);
   108dc:	d9800117 	ldw	r6,4(sp)
   108e0:	d9400017 	ldw	r5,0(sp)
   108e4:	000f883a 	mov	r7,zero
   108e8:	8809883a 	mov	r4,r17
   108ec:	00119b80 	call	119b8 <alt_printf>
				alt_printf("%c",0x4);
   108f0:	01000074 	movhi	r4,1
   108f4:	01400104 	movi	r5,4
   108f8:	2107fa04 	addi	r4,r4,8168
   108fc:	00119b80 	call	119b8 <alt_printf>
				con = 0;
   10900:	0025883a 	mov	r18,zero
			}

			alt_printf("<-->%x %x %x<-->\n",x_read,y_read,button);
   10904:	d9800117 	ldw	r6,4(sp)
   10908:	d9400017 	ldw	r5,0(sp)
   1090c:	8809883a 	mov	r4,r17
   10910:	980f883a 	mov	r7,r19
   10914:	00119b80 	call	119b8 <alt_printf>
			convert_read(x_read, &level, &led);
   10918:	d9000017 	ldw	r4,0(sp)
   1091c:	d1a07104 	addi	r6,gp,-32316
   10920:	d1607204 	addi	r5,gp,-32312
   10924:	001024c0 	call	1024c <convert_read>
		while(con){
   10928:	903fe31e 	bne	r18,zero,108b8 <main+0xf8>

		}
		char text2[2*CHARLIM] = "";					// The buffer for the printing text
   1092c:	d9002504 	addi	r4,sp,148
   10930:	01801f04 	movi	r6,124
   10934:	000b883a 	mov	r5,zero
   10938:	d8002415 	stw	zero,144(sp)
   1093c:	0010e700 	call	10e70 <memset>
		prevLetter = '!';
		length = 0;
		running = 1;
   10940:	00800044 	movi	r2,1
		length = 0;
   10944:	d8000215 	stw	zero,8(sp)
		running = 1;
   10948:	d8800315 	stw	r2,12(sp)
		prevLetter = alt_getchar();							// Extract the first character (and create a hold until one arrives)
   1094c:	00118000 	call	11800 <alt_getchar>
		prevLetter = generate_text(prevLetter, &length, text2, &running);
   10950:	11003fcc 	andi	r4,r2,255
   10954:	2100201c 	xori	r4,r4,128
   10958:	d9c00304 	addi	r7,sp,12
   1095c:	d9802404 	addi	r6,sp,144
   10960:	d9400204 	addi	r5,sp,8
   10964:	213fe004 	addi	r4,r4,-128
   10968:	00106b00 	call	106b0 <generate_text>


		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBin(text2[0]));
   1096c:	d9002407 	ldb	r4,144(sp)
   10970:	00107980 	call	10798 <getBin>
   10974:	00c000b4 	movhi	r3,2
   10978:	18840835 	stwio	r2,4128(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBin(text2[1]));
   1097c:	d9002447 	ldb	r4,145(sp)
   10980:	00107980 	call	10798 <getBin>
   10984:	00c000b4 	movhi	r3,2
   10988:	18840c35 	stwio	r2,4144(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBin(text2[2]));
   1098c:	d9002487 	ldb	r4,146(sp)
   10990:	00107980 	call	10798 <getBin>
   10994:	00c000b4 	movhi	r3,2
   10998:	18841035 	stwio	r2,4160(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBin(text2[3]));
   1099c:	d90024c7 	ldb	r4,147(sp)
   109a0:	00107980 	call	10798 <getBin>
   109a4:	00c000b4 	movhi	r3,2
   109a8:	18841435 	stwio	r2,4176(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBin(text2[4]));
   109ac:	d9002507 	ldb	r4,148(sp)
   109b0:	00107980 	call	10798 <getBin>
   109b4:	00c000b4 	movhi	r3,2
   109b8:	18841835 	stwio	r2,4192(r3)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBin(text2[5]));
   109bc:	d9002547 	ldb	r4,149(sp)
   109c0:	00107980 	call	10798 <getBin>
   109c4:	00c000b4 	movhi	r3,2
   109c8:	18841c35 	stwio	r2,4208(r3)
		alt_printf("%c",0x4);
   109cc:	01000074 	movhi	r4,1
   109d0:	01400104 	movi	r5,4
   109d4:	2107fa04 	addi	r4,r4,8168
   109d8:	00119b80 	call	119b8 <alt_printf>
    while(1){
   109dc:	003f7e06 	br	107d8 <main+0x18>
   109e0:	04800044 	movi	r18,1
   109e4:	003fc706 	br	10904 <main+0x144>

    }
    return 0;
}
   109e8:	00800044 	movi	r2,1
   109ec:	dfc04817 	ldw	ra,288(sp)
   109f0:	dcc04717 	ldw	r19,284(sp)
   109f4:	dc804617 	ldw	r18,280(sp)
   109f8:	dc404517 	ldw	r17,276(sp)
   109fc:	dc004417 	ldw	r16,272(sp)
   10a00:	dec04904 	addi	sp,sp,292
   10a04:	f800283a 	ret

00010a08 <__divsi3>:
   10a08:	20001a16 	blt	r4,zero,10a74 <__divsi3+0x6c>
   10a0c:	000f883a 	mov	r7,zero
   10a10:	2800020e 	bge	r5,zero,10a1c <__divsi3+0x14>
   10a14:	014bc83a 	sub	r5,zero,r5
   10a18:	39c0005c 	xori	r7,r7,1
   10a1c:	200d883a 	mov	r6,r4
   10a20:	00c00044 	movi	r3,1
   10a24:	2900092e 	bgeu	r5,r4,10a4c <__divsi3+0x44>
   10a28:	00800804 	movi	r2,32
   10a2c:	00c00044 	movi	r3,1
   10a30:	00000106 	br	10a38 <__divsi3+0x30>
   10a34:	10001226 	beq	r2,zero,10a80 <__divsi3+0x78>
   10a38:	294b883a 	add	r5,r5,r5
   10a3c:	10bfffc4 	addi	r2,r2,-1
   10a40:	18c7883a 	add	r3,r3,r3
   10a44:	293ffb36 	bltu	r5,r4,10a34 <__divsi3+0x2c>
   10a48:	18000d26 	beq	r3,zero,10a80 <__divsi3+0x78>
   10a4c:	0005883a 	mov	r2,zero
   10a50:	31400236 	bltu	r6,r5,10a5c <__divsi3+0x54>
   10a54:	314dc83a 	sub	r6,r6,r5
   10a58:	10c4b03a 	or	r2,r2,r3
   10a5c:	1806d07a 	srli	r3,r3,1
   10a60:	280ad07a 	srli	r5,r5,1
   10a64:	183ffa1e 	bne	r3,zero,10a50 <__divsi3+0x48>
   10a68:	38000126 	beq	r7,zero,10a70 <__divsi3+0x68>
   10a6c:	0085c83a 	sub	r2,zero,r2
   10a70:	f800283a 	ret
   10a74:	0109c83a 	sub	r4,zero,r4
   10a78:	01c00044 	movi	r7,1
   10a7c:	003fe406 	br	10a10 <__divsi3+0x8>
   10a80:	0005883a 	mov	r2,zero
   10a84:	003ff806 	br	10a68 <__divsi3+0x60>

00010a88 <__modsi3>:
   10a88:	20001916 	blt	r4,zero,10af0 <__modsi3+0x68>
   10a8c:	000f883a 	mov	r7,zero
   10a90:	2005883a 	mov	r2,r4
   10a94:	2800010e 	bge	r5,zero,10a9c <__modsi3+0x14>
   10a98:	014bc83a 	sub	r5,zero,r5
   10a9c:	00c00044 	movi	r3,1
   10aa0:	2900092e 	bgeu	r5,r4,10ac8 <__modsi3+0x40>
   10aa4:	01800804 	movi	r6,32
   10aa8:	00c00044 	movi	r3,1
   10aac:	00000106 	br	10ab4 <__modsi3+0x2c>
   10ab0:	30000d26 	beq	r6,zero,10ae8 <__modsi3+0x60>
   10ab4:	294b883a 	add	r5,r5,r5
   10ab8:	31bfffc4 	addi	r6,r6,-1
   10abc:	18c7883a 	add	r3,r3,r3
   10ac0:	293ffb36 	bltu	r5,r4,10ab0 <__modsi3+0x28>
   10ac4:	18000826 	beq	r3,zero,10ae8 <__modsi3+0x60>
   10ac8:	1806d07a 	srli	r3,r3,1
   10acc:	11400136 	bltu	r2,r5,10ad4 <__modsi3+0x4c>
   10ad0:	1145c83a 	sub	r2,r2,r5
   10ad4:	280ad07a 	srli	r5,r5,1
   10ad8:	183ffb1e 	bne	r3,zero,10ac8 <__modsi3+0x40>
   10adc:	38000126 	beq	r7,zero,10ae4 <__modsi3+0x5c>
   10ae0:	0085c83a 	sub	r2,zero,r2
   10ae4:	f800283a 	ret
   10ae8:	2005883a 	mov	r2,r4
   10aec:	003ffb06 	br	10adc <__modsi3+0x54>
   10af0:	0109c83a 	sub	r4,zero,r4
   10af4:	01c00044 	movi	r7,1
   10af8:	003fe506 	br	10a90 <__modsi3+0x8>

00010afc <__udivsi3>:
   10afc:	200d883a 	mov	r6,r4
   10b00:	2900152e 	bgeu	r5,r4,10b58 <__udivsi3+0x5c>
   10b04:	28001416 	blt	r5,zero,10b58 <__udivsi3+0x5c>
   10b08:	00800804 	movi	r2,32
   10b0c:	00c00044 	movi	r3,1
   10b10:	00000206 	br	10b1c <__udivsi3+0x20>
   10b14:	10000e26 	beq	r2,zero,10b50 <__udivsi3+0x54>
   10b18:	28000516 	blt	r5,zero,10b30 <__udivsi3+0x34>
   10b1c:	294b883a 	add	r5,r5,r5
   10b20:	10bfffc4 	addi	r2,r2,-1
   10b24:	18c7883a 	add	r3,r3,r3
   10b28:	293ffa36 	bltu	r5,r4,10b14 <__udivsi3+0x18>
   10b2c:	18000826 	beq	r3,zero,10b50 <__udivsi3+0x54>
   10b30:	0005883a 	mov	r2,zero
   10b34:	31400236 	bltu	r6,r5,10b40 <__udivsi3+0x44>
   10b38:	314dc83a 	sub	r6,r6,r5
   10b3c:	10c4b03a 	or	r2,r2,r3
   10b40:	1806d07a 	srli	r3,r3,1
   10b44:	280ad07a 	srli	r5,r5,1
   10b48:	183ffa1e 	bne	r3,zero,10b34 <__udivsi3+0x38>
   10b4c:	f800283a 	ret
   10b50:	0005883a 	mov	r2,zero
   10b54:	f800283a 	ret
   10b58:	00c00044 	movi	r3,1
   10b5c:	003ff406 	br	10b30 <__udivsi3+0x34>

00010b60 <__umodsi3>:
   10b60:	2005883a 	mov	r2,r4
   10b64:	2900132e 	bgeu	r5,r4,10bb4 <__umodsi3+0x54>
   10b68:	28001216 	blt	r5,zero,10bb4 <__umodsi3+0x54>
   10b6c:	01800804 	movi	r6,32
   10b70:	00c00044 	movi	r3,1
   10b74:	00000206 	br	10b80 <__umodsi3+0x20>
   10b78:	30000c26 	beq	r6,zero,10bac <__umodsi3+0x4c>
   10b7c:	28000516 	blt	r5,zero,10b94 <__umodsi3+0x34>
   10b80:	294b883a 	add	r5,r5,r5
   10b84:	31bfffc4 	addi	r6,r6,-1
   10b88:	18c7883a 	add	r3,r3,r3
   10b8c:	293ffa36 	bltu	r5,r4,10b78 <__umodsi3+0x18>
   10b90:	18000626 	beq	r3,zero,10bac <__umodsi3+0x4c>
   10b94:	1806d07a 	srli	r3,r3,1
   10b98:	11400136 	bltu	r2,r5,10ba0 <__umodsi3+0x40>
   10b9c:	1145c83a 	sub	r2,r2,r5
   10ba0:	280ad07a 	srli	r5,r5,1
   10ba4:	183ffb1e 	bne	r3,zero,10b94 <__umodsi3+0x34>
   10ba8:	f800283a 	ret
   10bac:	2005883a 	mov	r2,r4
   10bb0:	f800283a 	ret
   10bb4:	00c00044 	movi	r3,1
   10bb8:	003ff606 	br	10b94 <__umodsi3+0x34>

00010bbc <__mulsi3>:
   10bbc:	0005883a 	mov	r2,zero
   10bc0:	20000726 	beq	r4,zero,10be0 <__mulsi3+0x24>
   10bc4:	20c0004c 	andi	r3,r4,1
   10bc8:	2008d07a 	srli	r4,r4,1
   10bcc:	18000126 	beq	r3,zero,10bd4 <__mulsi3+0x18>
   10bd0:	1145883a 	add	r2,r2,r5
   10bd4:	294b883a 	add	r5,r5,r5
   10bd8:	203ffa1e 	bne	r4,zero,10bc4 <__mulsi3+0x8>
   10bdc:	f800283a 	ret
   10be0:	f800283a 	ret

00010be4 <_asprintf_r>:
   10be4:	defff604 	addi	sp,sp,-40
   10be8:	dc000715 	stw	r16,28(sp)
   10bec:	2821883a 	mov	r16,r5
   10bf0:	dfc00815 	stw	ra,32(sp)
   10bf4:	d9c00915 	stw	r7,36(sp)
   10bf8:	00bffff4 	movhi	r2,65535
   10bfc:	1080a204 	addi	r2,r2,648
   10c00:	d8800015 	stw	r2,0(sp)
   10c04:	00800074 	movhi	r2,1
   10c08:	10833904 	addi	r2,r2,3300
   10c0c:	d8800115 	stw	r2,4(sp)
   10c10:	00800074 	movhi	r2,1
   10c14:	10843d04 	addi	r2,r2,4340
   10c18:	d9c00904 	addi	r7,sp,36
   10c1c:	d80b883a 	mov	r5,sp
   10c20:	d8000415 	stw	zero,16(sp)
   10c24:	d8000215 	stw	zero,8(sp)
   10c28:	d8000515 	stw	zero,20(sp)
   10c2c:	d8000315 	stw	zero,12(sp)
   10c30:	d8800615 	stw	r2,24(sp)
   10c34:	00112600 	call	11260 <___svfprintf_internal_r>
   10c38:	10000416 	blt	r2,zero,10c4c <_asprintf_r+0x68>
   10c3c:	d8c00417 	ldw	r3,16(sp)
   10c40:	18000005 	stb	zero,0(r3)
   10c44:	d8c00217 	ldw	r3,8(sp)
   10c48:	80c00015 	stw	r3,0(r16)
   10c4c:	dfc00817 	ldw	ra,32(sp)
   10c50:	dc000717 	ldw	r16,28(sp)
   10c54:	dec00a04 	addi	sp,sp,40
   10c58:	f800283a 	ret

00010c5c <asprintf>:
   10c5c:	defff504 	addi	sp,sp,-44
   10c60:	dc000715 	stw	r16,28(sp)
   10c64:	2021883a 	mov	r16,r4
   10c68:	dfc00815 	stw	ra,32(sp)
   10c6c:	d9800915 	stw	r6,36(sp)
   10c70:	d9c00a15 	stw	r7,40(sp)
   10c74:	00bffff4 	movhi	r2,65535
   10c78:	1080a204 	addi	r2,r2,648
   10c7c:	d8800015 	stw	r2,0(sp)
   10c80:	00800074 	movhi	r2,1
   10c84:	10833904 	addi	r2,r2,3300
   10c88:	d8800115 	stw	r2,4(sp)
   10c8c:	00800074 	movhi	r2,1
   10c90:	10843d04 	addi	r2,r2,4340
   10c94:	d8800615 	stw	r2,24(sp)
   10c98:	00800074 	movhi	r2,1
   10c9c:	11086417 	ldw	r4,8592(r2)
   10ca0:	280d883a 	mov	r6,r5
   10ca4:	d9c00904 	addi	r7,sp,36
   10ca8:	d80b883a 	mov	r5,sp
   10cac:	d8000415 	stw	zero,16(sp)
   10cb0:	d8000215 	stw	zero,8(sp)
   10cb4:	d8000515 	stw	zero,20(sp)
   10cb8:	d8000315 	stw	zero,12(sp)
   10cbc:	00112600 	call	11260 <___svfprintf_internal_r>
   10cc0:	10000416 	blt	r2,zero,10cd4 <asprintf+0x78>
   10cc4:	d8c00417 	ldw	r3,16(sp)
   10cc8:	18000005 	stb	zero,0(r3)
   10ccc:	d8c00217 	ldw	r3,8(sp)
   10cd0:	80c00015 	stw	r3,0(r16)
   10cd4:	dfc00817 	ldw	ra,32(sp)
   10cd8:	dc000717 	ldw	r16,28(sp)
   10cdc:	dec00b04 	addi	sp,sp,44
   10ce0:	f800283a 	ret

00010ce4 <__sfvwrite_small_str_mbf>:
   10ce4:	2880000b 	ldhu	r2,0(r5)
   10ce8:	10c0020c 	andi	r3,r2,8
   10cec:	18003e26 	beq	r3,zero,10de8 <__sfvwrite_small_str_mbf+0x104>
   10cf0:	28c0008f 	ldh	r3,2(r5)
   10cf4:	defffa04 	addi	sp,sp,-24
   10cf8:	dc000015 	stw	r16,0(sp)
   10cfc:	dfc00515 	stw	ra,20(sp)
   10d00:	dd000415 	stw	r20,16(sp)
   10d04:	dcc00315 	stw	r19,12(sp)
   10d08:	dc800215 	stw	r18,8(sp)
   10d0c:	dc400115 	stw	r17,4(sp)
   10d10:	2821883a 	mov	r16,r5
   10d14:	18002f0e 	bge	r3,zero,10dd4 <__sfvwrite_small_str_mbf+0xf0>
   10d18:	10c0800c 	andi	r3,r2,512
   10d1c:	18002d26 	beq	r3,zero,10dd4 <__sfvwrite_small_str_mbf+0xf0>
   10d20:	2c400517 	ldw	r17,20(r5)
   10d24:	3027883a 	mov	r19,r6
   10d28:	3825883a 	mov	r18,r7
   10d2c:	89c0140e 	bge	r17,r7,10d80 <__sfvwrite_small_str_mbf+0x9c>
   10d30:	1080200c 	andi	r2,r2,128
   10d34:	10001226 	beq	r2,zero,10d80 <__sfvwrite_small_str_mbf+0x9c>
   10d38:	28800417 	ldw	r2,16(r5)
   10d3c:	2c400217 	ldw	r17,8(r5)
   10d40:	1463c83a 	sub	r17,r2,r17
   10d44:	28800617 	ldw	r2,24(r5)
   10d48:	10002226 	beq	r2,zero,10dd4 <__sfvwrite_small_str_mbf+0xf0>
   10d4c:	00c00074 	movhi	r3,1
   10d50:	29400217 	ldw	r5,8(r5)
   10d54:	19086417 	ldw	r4,8592(r3)
   10d58:	3c69883a 	add	r20,r7,r17
   10d5c:	a00d883a 	mov	r6,r20
   10d60:	103ee83a 	callr	r2
   10d64:	10001b26 	beq	r2,zero,10dd4 <__sfvwrite_small_str_mbf+0xf0>
   10d68:	80800215 	stw	r2,8(r16)
   10d6c:	1445883a 	add	r2,r2,r17
   10d70:	80800415 	stw	r2,16(r16)
   10d74:	85000315 	stw	r20,12(r16)
   10d78:	84800515 	stw	r18,20(r16)
   10d7c:	9023883a 	mov	r17,r18
   10d80:	9440010e 	bge	r18,r17,10d88 <__sfvwrite_small_str_mbf+0xa4>
   10d84:	9023883a 	mov	r17,r18
   10d88:	81000417 	ldw	r4,16(r16)
   10d8c:	880d883a 	mov	r6,r17
   10d90:	980b883a 	mov	r5,r19
   10d94:	0010e100 	call	10e10 <memmove>
   10d98:	80800517 	ldw	r2,20(r16)
   10d9c:	81800417 	ldw	r6,16(r16)
   10da0:	1445c83a 	sub	r2,r2,r17
   10da4:	344d883a 	add	r6,r6,r17
   10da8:	80800515 	stw	r2,20(r16)
   10dac:	81800415 	stw	r6,16(r16)
   10db0:	0005883a 	mov	r2,zero
   10db4:	dfc00517 	ldw	ra,20(sp)
   10db8:	dd000417 	ldw	r20,16(sp)
   10dbc:	dcc00317 	ldw	r19,12(sp)
   10dc0:	dc800217 	ldw	r18,8(sp)
   10dc4:	dc400117 	ldw	r17,4(sp)
   10dc8:	dc000017 	ldw	r16,0(sp)
   10dcc:	dec00604 	addi	sp,sp,24
   10dd0:	f800283a 	ret
   10dd4:	8080000b 	ldhu	r2,0(r16)
   10dd8:	10801014 	ori	r2,r2,64
   10ddc:	8080000d 	sth	r2,0(r16)
   10de0:	00bfffc4 	movi	r2,-1
   10de4:	003ff306 	br	10db4 <__sfvwrite_small_str_mbf+0xd0>
   10de8:	00bfffc4 	movi	r2,-1
   10dec:	f800283a 	ret

00010df0 <malloc>:
   10df0:	00800074 	movhi	r2,1
   10df4:	200b883a 	mov	r5,r4
   10df8:	11086417 	ldw	r4,8592(r2)
   10dfc:	0010f901 	jmpi	10f90 <_malloc_r>

00010e00 <free>:
   10e00:	00800074 	movhi	r2,1
   10e04:	200b883a 	mov	r5,r4
   10e08:	11086417 	ldw	r4,8592(r2)
   10e0c:	0010e901 	jmpi	10e90 <_free_r>

00010e10 <memmove>:
   10e10:	2005883a 	mov	r2,r4
   10e14:	2900142e 	bgeu	r5,r4,10e68 <memmove+0x58>
   10e18:	298f883a 	add	r7,r5,r6
   10e1c:	21c0122e 	bgeu	r4,r7,10e68 <memmove+0x58>
   10e20:	018a303a 	nor	r5,zero,r6
   10e24:	0007883a 	mov	r3,zero
   10e28:	18ffffc4 	addi	r3,r3,-1
   10e2c:	28c0011e 	bne	r5,r3,10e34 <memmove+0x24>
   10e30:	f800283a 	ret
   10e34:	38c9883a 	add	r4,r7,r3
   10e38:	22000003 	ldbu	r8,0(r4)
   10e3c:	30c9883a 	add	r4,r6,r3
   10e40:	1109883a 	add	r4,r2,r4
   10e44:	22000005 	stb	r8,0(r4)
   10e48:	003ff706 	br	10e28 <memmove+0x18>
   10e4c:	28c9883a 	add	r4,r5,r3
   10e50:	21c00003 	ldbu	r7,0(r4)
   10e54:	10c9883a 	add	r4,r2,r3
   10e58:	18c00044 	addi	r3,r3,1
   10e5c:	21c00005 	stb	r7,0(r4)
   10e60:	30fffa1e 	bne	r6,r3,10e4c <memmove+0x3c>
   10e64:	f800283a 	ret
   10e68:	0007883a 	mov	r3,zero
   10e6c:	003ffc06 	br	10e60 <memmove+0x50>

00010e70 <memset>:
   10e70:	2005883a 	mov	r2,r4
   10e74:	218d883a 	add	r6,r4,r6
   10e78:	2007883a 	mov	r3,r4
   10e7c:	1980011e 	bne	r3,r6,10e84 <memset+0x14>
   10e80:	f800283a 	ret
   10e84:	18c00044 	addi	r3,r3,1
   10e88:	197fffc5 	stb	r5,-1(r3)
   10e8c:	003ffb06 	br	10e7c <memset+0xc>

00010e90 <_free_r>:
   10e90:	28003e26 	beq	r5,zero,10f8c <_free_r+0xfc>
   10e94:	28bfff17 	ldw	r2,-4(r5)
   10e98:	defffd04 	addi	sp,sp,-12
   10e9c:	dc000115 	stw	r16,4(sp)
   10ea0:	dfc00215 	stw	ra,8(sp)
   10ea4:	2c3fff04 	addi	r16,r5,-4
   10ea8:	1000010e 	bge	r2,zero,10eb0 <_free_r+0x20>
   10eac:	80a1883a 	add	r16,r16,r2
   10eb0:	d9000015 	stw	r4,0(sp)
   10eb4:	00119b00 	call	119b0 <__malloc_lock>
   10eb8:	00800074 	movhi	r2,1
   10ebc:	1088d717 	ldw	r2,9052(r2)
   10ec0:	d9000017 	ldw	r4,0(sp)
   10ec4:	1000071e 	bne	r2,zero,10ee4 <_free_r+0x54>
   10ec8:	80000115 	stw	zero,4(r16)
   10ecc:	00800074 	movhi	r2,1
   10ed0:	1408d715 	stw	r16,9052(r2)
   10ed4:	dfc00217 	ldw	ra,8(sp)
   10ed8:	dc000117 	ldw	r16,4(sp)
   10edc:	dec00304 	addi	sp,sp,12
   10ee0:	00119b41 	jmpi	119b4 <__malloc_unlock>
   10ee4:	8080092e 	bgeu	r16,r2,10f0c <_free_r+0x7c>
   10ee8:	81400017 	ldw	r5,0(r16)
   10eec:	8147883a 	add	r3,r16,r5
   10ef0:	10c0041e 	bne	r2,r3,10f04 <_free_r+0x74>
   10ef4:	10c00017 	ldw	r3,0(r2)
   10ef8:	10800117 	ldw	r2,4(r2)
   10efc:	1947883a 	add	r3,r3,r5
   10f00:	80c00015 	stw	r3,0(r16)
   10f04:	80800115 	stw	r2,4(r16)
   10f08:	003ff006 	br	10ecc <_free_r+0x3c>
   10f0c:	1007883a 	mov	r3,r2
   10f10:	10800117 	ldw	r2,4(r2)
   10f14:	10000126 	beq	r2,zero,10f1c <_free_r+0x8c>
   10f18:	80bffc2e 	bgeu	r16,r2,10f0c <_free_r+0x7c>
   10f1c:	19400017 	ldw	r5,0(r3)
   10f20:	194d883a 	add	r6,r3,r5
   10f24:	34000b1e 	bne	r6,r16,10f54 <_free_r+0xc4>
   10f28:	81800017 	ldw	r6,0(r16)
   10f2c:	298b883a 	add	r5,r5,r6
   10f30:	19400015 	stw	r5,0(r3)
   10f34:	194d883a 	add	r6,r3,r5
   10f38:	11bfe61e 	bne	r2,r6,10ed4 <_free_r+0x44>
   10f3c:	11800017 	ldw	r6,0(r2)
   10f40:	10800117 	ldw	r2,4(r2)
   10f44:	314b883a 	add	r5,r6,r5
   10f48:	19400015 	stw	r5,0(r3)
   10f4c:	18800115 	stw	r2,4(r3)
   10f50:	003fe006 	br	10ed4 <_free_r+0x44>
   10f54:	8180032e 	bgeu	r16,r6,10f64 <_free_r+0xd4>
   10f58:	00800304 	movi	r2,12
   10f5c:	20800015 	stw	r2,0(r4)
   10f60:	003fdc06 	br	10ed4 <_free_r+0x44>
   10f64:	81800017 	ldw	r6,0(r16)
   10f68:	818b883a 	add	r5,r16,r6
   10f6c:	1140041e 	bne	r2,r5,10f80 <_free_r+0xf0>
   10f70:	11400017 	ldw	r5,0(r2)
   10f74:	10800117 	ldw	r2,4(r2)
   10f78:	298b883a 	add	r5,r5,r6
   10f7c:	81400015 	stw	r5,0(r16)
   10f80:	80800115 	stw	r2,4(r16)
   10f84:	1c000115 	stw	r16,4(r3)
   10f88:	003fd206 	br	10ed4 <_free_r+0x44>
   10f8c:	f800283a 	ret

00010f90 <_malloc_r>:
   10f90:	defffc04 	addi	sp,sp,-16
   10f94:	00bfff04 	movi	r2,-4
   10f98:	dc400115 	stw	r17,4(sp)
   10f9c:	2c4000c4 	addi	r17,r5,3
   10fa0:	88a2703a 	and	r17,r17,r2
   10fa4:	8c400204 	addi	r17,r17,8
   10fa8:	dc800215 	stw	r18,8(sp)
   10fac:	dfc00315 	stw	ra,12(sp)
   10fb0:	dc000015 	stw	r16,0(sp)
   10fb4:	88800328 	cmpgeui	r2,r17,12
   10fb8:	2025883a 	mov	r18,r4
   10fbc:	10001b1e 	bne	r2,zero,1102c <_malloc_r+0x9c>
   10fc0:	04400304 	movi	r17,12
   10fc4:	89401a36 	bltu	r17,r5,11030 <_malloc_r+0xa0>
   10fc8:	9009883a 	mov	r4,r18
   10fcc:	00119b00 	call	119b0 <__malloc_lock>
   10fd0:	00800074 	movhi	r2,1
   10fd4:	10c8d717 	ldw	r3,9052(r2)
   10fd8:	1821883a 	mov	r16,r3
   10fdc:	80001d1e 	bne	r16,zero,11054 <_malloc_r+0xc4>
   10fe0:	00800074 	movhi	r2,1
   10fe4:	1088d617 	ldw	r2,9048(r2)
   10fe8:	1000061e 	bne	r2,zero,11004 <_malloc_r+0x74>
   10fec:	00800074 	movhi	r2,1
   10ff0:	1148d617 	ldw	r5,9048(r2)
   10ff4:	9009883a 	mov	r4,r18
   10ff8:	00111ac0 	call	111ac <_sbrk_r>
   10ffc:	00c00074 	movhi	r3,1
   11000:	1888d615 	stw	r2,9048(r3)
   11004:	880b883a 	mov	r5,r17
   11008:	9009883a 	mov	r4,r18
   1100c:	00111ac0 	call	111ac <_sbrk_r>
   11010:	10ffffd8 	cmpnei	r3,r2,-1
   11014:	18002d1e 	bne	r3,zero,110cc <_malloc_r+0x13c>
   11018:	00800304 	movi	r2,12
   1101c:	90800015 	stw	r2,0(r18)
   11020:	9009883a 	mov	r4,r18
   11024:	00119b40 	call	119b4 <__malloc_unlock>
   11028:	00000306 	br	11038 <_malloc_r+0xa8>
   1102c:	883fe50e 	bge	r17,zero,10fc4 <_malloc_r+0x34>
   11030:	00800304 	movi	r2,12
   11034:	90800015 	stw	r2,0(r18)
   11038:	0005883a 	mov	r2,zero
   1103c:	dfc00317 	ldw	ra,12(sp)
   11040:	dc800217 	ldw	r18,8(sp)
   11044:	dc400117 	ldw	r17,4(sp)
   11048:	dc000017 	ldw	r16,0(sp)
   1104c:	dec00404 	addi	sp,sp,16
   11050:	f800283a 	ret
   11054:	80800017 	ldw	r2,0(r16)
   11058:	1445c83a 	sub	r2,r2,r17
   1105c:	10001816 	blt	r2,zero,110c0 <_malloc_r+0x130>
   11060:	11000330 	cmpltui	r4,r2,12
   11064:	2000041e 	bne	r4,zero,11078 <_malloc_r+0xe8>
   11068:	80800015 	stw	r2,0(r16)
   1106c:	80a1883a 	add	r16,r16,r2
   11070:	84400015 	stw	r17,0(r16)
   11074:	00000406 	br	11088 <_malloc_r+0xf8>
   11078:	80800117 	ldw	r2,4(r16)
   1107c:	1c000e1e 	bne	r3,r16,110b8 <_malloc_r+0x128>
   11080:	00c00074 	movhi	r3,1
   11084:	1888d715 	stw	r2,9052(r3)
   11088:	9009883a 	mov	r4,r18
   1108c:	00119b40 	call	119b4 <__malloc_unlock>
   11090:	013ffe04 	movi	r4,-8
   11094:	808002c4 	addi	r2,r16,11
   11098:	80c00104 	addi	r3,r16,4
   1109c:	1104703a 	and	r2,r2,r4
   110a0:	10c9c83a 	sub	r4,r2,r3
   110a4:	10ffe526 	beq	r2,r3,1103c <_malloc_r+0xac>
   110a8:	8121883a 	add	r16,r16,r4
   110ac:	1887c83a 	sub	r3,r3,r2
   110b0:	80c00015 	stw	r3,0(r16)
   110b4:	003fe106 	br	1103c <_malloc_r+0xac>
   110b8:	18800115 	stw	r2,4(r3)
   110bc:	003ff206 	br	11088 <_malloc_r+0xf8>
   110c0:	8007883a 	mov	r3,r16
   110c4:	84000117 	ldw	r16,4(r16)
   110c8:	003fc406 	br	10fdc <_malloc_r+0x4c>
   110cc:	140000c4 	addi	r16,r2,3
   110d0:	00ffff04 	movi	r3,-4
   110d4:	80e0703a 	and	r16,r16,r3
   110d8:	143fe526 	beq	r2,r16,11070 <_malloc_r+0xe0>
   110dc:	808bc83a 	sub	r5,r16,r2
   110e0:	9009883a 	mov	r4,r18
   110e4:	00111ac0 	call	111ac <_sbrk_r>
   110e8:	10bfffe0 	cmpeqi	r2,r2,-1
   110ec:	103fe026 	beq	r2,zero,11070 <_malloc_r+0xe0>
   110f0:	003fc906 	br	11018 <_malloc_r+0x88>

000110f4 <_realloc_r>:
   110f4:	defffb04 	addi	sp,sp,-20
   110f8:	dc400115 	stw	r17,4(sp)
   110fc:	dfc00415 	stw	ra,16(sp)
   11100:	dcc00315 	stw	r19,12(sp)
   11104:	dc800215 	stw	r18,8(sp)
   11108:	dc000015 	stw	r16,0(sp)
   1110c:	3023883a 	mov	r17,r6
   11110:	2800081e 	bne	r5,zero,11134 <_realloc_r+0x40>
   11114:	300b883a 	mov	r5,r6
   11118:	dfc00417 	ldw	ra,16(sp)
   1111c:	dcc00317 	ldw	r19,12(sp)
   11120:	dc800217 	ldw	r18,8(sp)
   11124:	dc400117 	ldw	r17,4(sp)
   11128:	dc000017 	ldw	r16,0(sp)
   1112c:	dec00504 	addi	sp,sp,20
   11130:	0010f901 	jmpi	10f90 <_malloc_r>
   11134:	30000a1e 	bne	r6,zero,11160 <_realloc_r+0x6c>
   11138:	0010e900 	call	10e90 <_free_r>
   1113c:	0021883a 	mov	r16,zero
   11140:	8005883a 	mov	r2,r16
   11144:	dfc00417 	ldw	ra,16(sp)
   11148:	dcc00317 	ldw	r19,12(sp)
   1114c:	dc800217 	ldw	r18,8(sp)
   11150:	dc400117 	ldw	r17,4(sp)
   11154:	dc000017 	ldw	r16,0(sp)
   11158:	dec00504 	addi	sp,sp,20
   1115c:	f800283a 	ret
   11160:	2027883a 	mov	r19,r4
   11164:	2825883a 	mov	r18,r5
   11168:	00117c80 	call	117c8 <_malloc_usable_size_r>
   1116c:	14400d2e 	bgeu	r2,r17,111a4 <_realloc_r+0xb0>
   11170:	880b883a 	mov	r5,r17
   11174:	9809883a 	mov	r4,r19
   11178:	0010f900 	call	10f90 <_malloc_r>
   1117c:	1021883a 	mov	r16,r2
   11180:	103fef26 	beq	r2,zero,11140 <_realloc_r+0x4c>
   11184:	900b883a 	mov	r5,r18
   11188:	880d883a 	mov	r6,r17
   1118c:	1009883a 	mov	r4,r2
   11190:	00117a00 	call	117a0 <memcpy>
   11194:	900b883a 	mov	r5,r18
   11198:	9809883a 	mov	r4,r19
   1119c:	0010e900 	call	10e90 <_free_r>
   111a0:	003fe706 	br	11140 <_realloc_r+0x4c>
   111a4:	9021883a 	mov	r16,r18
   111a8:	003fe506 	br	11140 <_realloc_r+0x4c>

000111ac <_sbrk_r>:
   111ac:	defffe04 	addi	sp,sp,-8
   111b0:	dc000015 	stw	r16,0(sp)
   111b4:	00800074 	movhi	r2,1
   111b8:	2021883a 	mov	r16,r4
   111bc:	2809883a 	mov	r4,r5
   111c0:	dfc00115 	stw	ra,4(sp)
   111c4:	1008d815 	stw	zero,9056(r2)
   111c8:	0011b7c0 	call	11b7c <sbrk>
   111cc:	10ffffd8 	cmpnei	r3,r2,-1
   111d0:	1800041e 	bne	r3,zero,111e4 <_sbrk_r+0x38>
   111d4:	00c00074 	movhi	r3,1
   111d8:	18c8d817 	ldw	r3,9056(r3)
   111dc:	18000126 	beq	r3,zero,111e4 <_sbrk_r+0x38>
   111e0:	80c00015 	stw	r3,0(r16)
   111e4:	dfc00117 	ldw	ra,4(sp)
   111e8:	dc000017 	ldw	r16,0(sp)
   111ec:	dec00204 	addi	sp,sp,8
   111f0:	f800283a 	ret

000111f4 <print_repeat>:
   111f4:	defffb04 	addi	sp,sp,-20
   111f8:	dc800315 	stw	r18,12(sp)
   111fc:	dc400215 	stw	r17,8(sp)
   11200:	dc000115 	stw	r16,4(sp)
   11204:	dfc00415 	stw	ra,16(sp)
   11208:	2025883a 	mov	r18,r4
   1120c:	2823883a 	mov	r17,r5
   11210:	d9800005 	stb	r6,0(sp)
   11214:	3821883a 	mov	r16,r7
   11218:	04000716 	blt	zero,r16,11238 <print_repeat+0x44>
   1121c:	0005883a 	mov	r2,zero
   11220:	dfc00417 	ldw	ra,16(sp)
   11224:	dc800317 	ldw	r18,12(sp)
   11228:	dc400217 	ldw	r17,8(sp)
   1122c:	dc000117 	ldw	r16,4(sp)
   11230:	dec00504 	addi	sp,sp,20
   11234:	f800283a 	ret
   11238:	88800117 	ldw	r2,4(r17)
   1123c:	01c00044 	movi	r7,1
   11240:	d80d883a 	mov	r6,sp
   11244:	880b883a 	mov	r5,r17
   11248:	9009883a 	mov	r4,r18
   1124c:	103ee83a 	callr	r2
   11250:	843fffc4 	addi	r16,r16,-1
   11254:	103ff026 	beq	r2,zero,11218 <print_repeat+0x24>
   11258:	00bfffc4 	movi	r2,-1
   1125c:	003ff006 	br	11220 <print_repeat+0x2c>

00011260 <___svfprintf_internal_r>:
   11260:	deffe604 	addi	sp,sp,-104
   11264:	ddc01715 	stw	r23,92(sp)
   11268:	dd801615 	stw	r22,88(sp)
   1126c:	dd001415 	stw	r20,80(sp)
   11270:	dcc01315 	stw	r19,76(sp)
   11274:	dc801215 	stw	r18,72(sp)
   11278:	dc401115 	stw	r17,68(sp)
   1127c:	dc001015 	stw	r16,64(sp)
   11280:	dfc01915 	stw	ra,100(sp)
   11284:	df001815 	stw	fp,96(sp)
   11288:	dd401515 	stw	r21,84(sp)
   1128c:	2021883a 	mov	r16,r4
   11290:	282f883a 	mov	r23,r5
   11294:	d9800515 	stw	r6,20(sp)
   11298:	3811883a 	mov	r8,r7
   1129c:	002d883a 	mov	r22,zero
   112a0:	d8000215 	stw	zero,8(sp)
   112a4:	0027883a 	mov	r19,zero
   112a8:	0029883a 	mov	r20,zero
   112ac:	0025883a 	mov	r18,zero
   112b0:	0023883a 	mov	r17,zero
   112b4:	d8000115 	stw	zero,4(sp)
   112b8:	d8000015 	stw	zero,0(sp)
   112bc:	0005883a 	mov	r2,zero
   112c0:	00000206 	br	112cc <___svfprintf_internal_r+0x6c>
   112c4:	114000e0 	cmpeqi	r5,r2,3
   112c8:	2800411e 	bne	r5,zero,113d0 <___svfprintf_internal_r+0x170>
   112cc:	d8c00517 	ldw	r3,20(sp)
   112d0:	19000003 	ldbu	r4,0(r3)
   112d4:	18c00044 	addi	r3,r3,1
   112d8:	d8c00515 	stw	r3,20(sp)
   112dc:	21803fcc 	andi	r6,r4,255
   112e0:	3180201c 	xori	r6,r6,128
   112e4:	31bfe004 	addi	r6,r6,-128
   112e8:	30001626 	beq	r6,zero,11344 <___svfprintf_internal_r+0xe4>
   112ec:	114000a0 	cmpeqi	r5,r2,2
   112f0:	2800251e 	bne	r5,zero,11388 <___svfprintf_internal_r+0x128>
   112f4:	114000c8 	cmpgei	r5,r2,3
   112f8:	283ff21e 	bne	r5,zero,112c4 <___svfprintf_internal_r+0x64>
   112fc:	10000426 	beq	r2,zero,11310 <___svfprintf_internal_r+0xb0>
   11300:	10800060 	cmpeqi	r2,r2,1
   11304:	10001c1e 	bne	r2,zero,11378 <___svfprintf_internal_r+0x118>
   11308:	00800084 	movi	r2,2
   1130c:	003fef06 	br	112cc <___svfprintf_internal_r+0x6c>
   11310:	31800960 	cmpeqi	r6,r6,37
   11314:	3001051e 	bne	r6,zero,1172c <___svfprintf_internal_r+0x4cc>
   11318:	b8800117 	ldw	r2,4(r23)
   1131c:	da000315 	stw	r8,12(sp)
   11320:	d9000805 	stb	r4,32(sp)
   11324:	01c00044 	movi	r7,1
   11328:	d9800804 	addi	r6,sp,32
   1132c:	b80b883a 	mov	r5,r23
   11330:	8009883a 	mov	r4,r16
   11334:	103ee83a 	callr	r2
   11338:	da000317 	ldw	r8,12(sp)
   1133c:	10001d26 	beq	r2,zero,113b4 <___svfprintf_internal_r+0x154>
   11340:	05bfffc4 	movi	r22,-1
   11344:	b005883a 	mov	r2,r22
   11348:	dfc01917 	ldw	ra,100(sp)
   1134c:	df001817 	ldw	fp,96(sp)
   11350:	ddc01717 	ldw	r23,92(sp)
   11354:	dd801617 	ldw	r22,88(sp)
   11358:	dd401517 	ldw	r21,84(sp)
   1135c:	dd001417 	ldw	r20,80(sp)
   11360:	dcc01317 	ldw	r19,76(sp)
   11364:	dc801217 	ldw	r18,72(sp)
   11368:	dc401117 	ldw	r17,68(sp)
   1136c:	dc001017 	ldw	r16,64(sp)
   11370:	dec01a04 	addi	sp,sp,104
   11374:	f800283a 	ret
   11378:	30800c20 	cmpeqi	r2,r6,48
   1137c:	1000f41e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x4f0>
   11380:	30800958 	cmpnei	r2,r6,37
   11384:	103fe426 	beq	r2,zero,11318 <___svfprintf_internal_r+0xb8>
   11388:	217ff404 	addi	r5,r4,-48
   1138c:	29403fcc 	andi	r5,r5,255
   11390:	288002a8 	cmpgeui	r2,r5,10
   11394:	10000b1e 	bne	r2,zero,113c4 <___svfprintf_internal_r+0x164>
   11398:	88bfffe0 	cmpeqi	r2,r17,-1
   1139c:	1000071e 	bne	r2,zero,113bc <___svfprintf_internal_r+0x15c>
   113a0:	880490ba 	slli	r2,r17,2
   113a4:	1463883a 	add	r17,r2,r17
   113a8:	8822907a 	slli	r17,r17,1
   113ac:	2c63883a 	add	r17,r5,r17
   113b0:	003fd506 	br	11308 <___svfprintf_internal_r+0xa8>
   113b4:	b5800044 	addi	r22,r22,1
   113b8:	003fc406 	br	112cc <___svfprintf_internal_r+0x6c>
   113bc:	0023883a 	mov	r17,zero
   113c0:	003ffa06 	br	113ac <___svfprintf_internal_r+0x14c>
   113c4:	30800ba0 	cmpeqi	r2,r6,46
   113c8:	1000e61e 	bne	r2,zero,11764 <___svfprintf_internal_r+0x504>
   113cc:	00800084 	movi	r2,2
   113d0:	213ff404 	addi	r4,r4,-48
   113d4:	21003fcc 	andi	r4,r4,255
   113d8:	214002a8 	cmpgeui	r5,r4,10
   113dc:	2800091e 	bne	r5,zero,11404 <___svfprintf_internal_r+0x1a4>
   113e0:	917fffe0 	cmpeqi	r5,r18,-1
   113e4:	2800051e 	bne	r5,zero,113fc <___svfprintf_internal_r+0x19c>
   113e8:	900a90ba 	slli	r5,r18,2
   113ec:	2ca5883a 	add	r18,r5,r18
   113f0:	9024907a 	slli	r18,r18,1
   113f4:	24a5883a 	add	r18,r4,r18
   113f8:	003fb406 	br	112cc <___svfprintf_internal_r+0x6c>
   113fc:	0025883a 	mov	r18,zero
   11400:	003ffc06 	br	113f4 <___svfprintf_internal_r+0x194>
   11404:	30801b20 	cmpeqi	r2,r6,108
   11408:	1000d41e 	bne	r2,zero,1175c <___svfprintf_internal_r+0x4fc>
   1140c:	90bfffe0 	cmpeqi	r2,r18,-1
   11410:	10000f1e 	bne	r2,zero,11450 <___svfprintf_internal_r+0x1f0>
   11414:	d8000015 	stw	zero,0(sp)
   11418:	30801be0 	cmpeqi	r2,r6,111
   1141c:	1000d31e 	bne	r2,zero,1176c <___svfprintf_internal_r+0x50c>
   11420:	30801c08 	cmpgei	r2,r6,112
   11424:	1000171e 	bne	r2,zero,11484 <___svfprintf_internal_r+0x224>
   11428:	308018e0 	cmpeqi	r2,r6,99
   1142c:	1000a61e 	bne	r2,zero,116c8 <___svfprintf_internal_r+0x468>
   11430:	30801908 	cmpgei	r2,r6,100
   11434:	1000081e 	bne	r2,zero,11458 <___svfprintf_internal_r+0x1f8>
   11438:	31801620 	cmpeqi	r6,r6,88
   1143c:	303f9f26 	beq	r6,zero,112bc <___svfprintf_internal_r+0x5c>
   11440:	00800044 	movi	r2,1
   11444:	d8800215 	stw	r2,8(sp)
   11448:	05000404 	movi	r20,16
   1144c:	0000c806 	br	11770 <___svfprintf_internal_r+0x510>
   11450:	04800044 	movi	r18,1
   11454:	003ff006 	br	11418 <___svfprintf_internal_r+0x1b8>
   11458:	30801920 	cmpeqi	r2,r6,100
   1145c:	1000021e 	bne	r2,zero,11468 <___svfprintf_internal_r+0x208>
   11460:	31801a60 	cmpeqi	r6,r6,105
   11464:	303f9526 	beq	r6,zero,112bc <___svfprintf_internal_r+0x5c>
   11468:	40800104 	addi	r2,r8,4
   1146c:	d8800415 	stw	r2,16(sp)
   11470:	9800bf26 	beq	r19,zero,11770 <___svfprintf_internal_r+0x510>
   11474:	45400017 	ldw	r21,0(r8)
   11478:	a8002216 	blt	r21,zero,11504 <___svfprintf_internal_r+0x2a4>
   1147c:	04c00044 	movi	r19,1
   11480:	0000bf06 	br	11780 <___svfprintf_internal_r+0x520>
   11484:	30801d60 	cmpeqi	r2,r6,117
   11488:	1000b91e 	bne	r2,zero,11770 <___svfprintf_internal_r+0x510>
   1148c:	30801e20 	cmpeqi	r2,r6,120
   11490:	103fed1e 	bne	r2,zero,11448 <___svfprintf_internal_r+0x1e8>
   11494:	31801ce0 	cmpeqi	r6,r6,115
   11498:	303f8826 	beq	r6,zero,112bc <___svfprintf_internal_r+0x5c>
   1149c:	45400017 	ldw	r21,0(r8)
   114a0:	40800104 	addi	r2,r8,4
   114a4:	d8800315 	stw	r2,12(sp)
   114a8:	a809883a 	mov	r4,r21
   114ac:	00117e40 	call	117e4 <strlen>
   114b0:	888fc83a 	sub	r7,r17,r2
   114b4:	1039883a 	mov	fp,r2
   114b8:	01c0080e 	bge	zero,r7,114dc <___svfprintf_internal_r+0x27c>
   114bc:	01800804 	movi	r6,32
   114c0:	b80b883a 	mov	r5,r23
   114c4:	8009883a 	mov	r4,r16
   114c8:	d9c00415 	stw	r7,16(sp)
   114cc:	00111f40 	call	111f4 <print_repeat>
   114d0:	103f9b1e 	bne	r2,zero,11340 <___svfprintf_internal_r+0xe0>
   114d4:	d9c00417 	ldw	r7,16(sp)
   114d8:	b1ed883a 	add	r22,r22,r7
   114dc:	b8800117 	ldw	r2,4(r23)
   114e0:	e00f883a 	mov	r7,fp
   114e4:	a80d883a 	mov	r6,r21
   114e8:	b80b883a 	mov	r5,r23
   114ec:	8009883a 	mov	r4,r16
   114f0:	103ee83a 	callr	r2
   114f4:	103f921e 	bne	r2,zero,11340 <___svfprintf_internal_r+0xe0>
   114f8:	da000317 	ldw	r8,12(sp)
   114fc:	b72d883a 	add	r22,r22,fp
   11500:	003f7206 	br	112cc <___svfprintf_internal_r+0x6c>
   11504:	056bc83a 	sub	r21,zero,r21
   11508:	04c00044 	movi	r19,1
   1150c:	02800044 	movi	r10,1
   11510:	df000804 	addi	fp,sp,32
   11514:	e00d883a 	mov	r6,fp
   11518:	a8002f1e 	bne	r21,zero,115d8 <___svfprintf_internal_r+0x378>
   1151c:	e185c83a 	sub	r2,fp,r6
   11520:	d8800315 	stw	r2,12(sp)
   11524:	9085c83a 	sub	r2,r18,r2
   11528:	0080090e 	bge	zero,r2,11550 <___svfprintf_internal_r+0x2f0>
   1152c:	e085883a 	add	r2,fp,r2
   11530:	d8c01004 	addi	r3,sp,64
   11534:	e0c0042e 	bgeu	fp,r3,11548 <___svfprintf_internal_r+0x2e8>
   11538:	e7000044 	addi	fp,fp,1
   1153c:	00c00c04 	movi	r3,48
   11540:	e0ffffc5 	stb	r3,-1(fp)
   11544:	e0bffa1e 	bne	fp,r2,11530 <___svfprintf_internal_r+0x2d0>
   11548:	e185c83a 	sub	r2,fp,r6
   1154c:	d8800315 	stw	r2,12(sp)
   11550:	d8800317 	ldw	r2,12(sp)
   11554:	5097883a 	add	r11,r10,r2
   11558:	d8800017 	ldw	r2,0(sp)
   1155c:	8aebc83a 	sub	r21,r17,r11
   11560:	10003626 	beq	r2,zero,1163c <___svfprintf_internal_r+0x3dc>
   11564:	50000a26 	beq	r10,zero,11590 <___svfprintf_internal_r+0x330>
   11568:	00800b44 	movi	r2,45
   1156c:	d88007c5 	stb	r2,31(sp)
   11570:	b8800117 	ldw	r2,4(r23)
   11574:	01c00044 	movi	r7,1
   11578:	d98007c4 	addi	r6,sp,31
   1157c:	b80b883a 	mov	r5,r23
   11580:	8009883a 	mov	r4,r16
   11584:	103ee83a 	callr	r2
   11588:	103f6d1e 	bne	r2,zero,11340 <___svfprintf_internal_r+0xe0>
   1158c:	b5800044 	addi	r22,r22,1
   11590:	0540070e 	bge	zero,r21,115b0 <___svfprintf_internal_r+0x350>
   11594:	a80f883a 	mov	r7,r21
   11598:	01800c04 	movi	r6,48
   1159c:	b80b883a 	mov	r5,r23
   115a0:	8009883a 	mov	r4,r16
   115a4:	00111f40 	call	111f4 <print_repeat>
   115a8:	103f651e 	bne	r2,zero,11340 <___svfprintf_internal_r+0xe0>
   115ac:	b56d883a 	add	r22,r22,r21
   115b0:	d8800317 	ldw	r2,12(sp)
   115b4:	e011883a 	mov	r8,fp
   115b8:	b72d883a 	add	r22,r22,fp
   115bc:	172bc83a 	sub	r21,r2,fp
   115c0:	aa05883a 	add	r2,r21,r8
   115c4:	b207c83a 	sub	r3,r22,r8
   115c8:	00803216 	blt	zero,r2,11694 <___svfprintf_internal_r+0x434>
   115cc:	da000417 	ldw	r8,16(sp)
   115d0:	182d883a 	mov	r22,r3
   115d4:	003f3906 	br	112bc <___svfprintf_internal_r+0x5c>
   115d8:	a809883a 	mov	r4,r21
   115dc:	a00b883a 	mov	r5,r20
   115e0:	da800615 	stw	r10,24(sp)
   115e4:	0010afc0 	call	10afc <__udivsi3>
   115e8:	1009883a 	mov	r4,r2
   115ec:	a00b883a 	mov	r5,r20
   115f0:	d8800315 	stw	r2,12(sp)
   115f4:	0010bbc0 	call	10bbc <__mulsi3>
   115f8:	a8abc83a 	sub	r21,r21,r2
   115fc:	a8800288 	cmpgei	r2,r21,10
   11600:	d9000317 	ldw	r4,12(sp)
   11604:	da800617 	ldw	r10,24(sp)
   11608:	d9800804 	addi	r6,sp,32
   1160c:	1000051e 	bne	r2,zero,11624 <___svfprintf_internal_r+0x3c4>
   11610:	ad400c04 	addi	r21,r21,48
   11614:	e7000044 	addi	fp,fp,1
   11618:	e57fffc5 	stb	r21,-1(fp)
   1161c:	202b883a 	mov	r21,r4
   11620:	003fbd06 	br	11518 <___svfprintf_internal_r+0x2b8>
   11624:	d8800217 	ldw	r2,8(sp)
   11628:	10000226 	beq	r2,zero,11634 <___svfprintf_internal_r+0x3d4>
   1162c:	ad400dc4 	addi	r21,r21,55
   11630:	003ff806 	br	11614 <___svfprintf_internal_r+0x3b4>
   11634:	ad4015c4 	addi	r21,r21,87
   11638:	003ff606 	br	11614 <___svfprintf_internal_r+0x3b4>
   1163c:	0540090e 	bge	zero,r21,11664 <___svfprintf_internal_r+0x404>
   11640:	a80f883a 	mov	r7,r21
   11644:	01800804 	movi	r6,32
   11648:	b80b883a 	mov	r5,r23
   1164c:	8009883a 	mov	r4,r16
   11650:	da800615 	stw	r10,24(sp)
   11654:	00111f40 	call	111f4 <print_repeat>
   11658:	103f391e 	bne	r2,zero,11340 <___svfprintf_internal_r+0xe0>
   1165c:	da800617 	ldw	r10,24(sp)
   11660:	b56d883a 	add	r22,r22,r21
   11664:	503fd226 	beq	r10,zero,115b0 <___svfprintf_internal_r+0x350>
   11668:	00800b44 	movi	r2,45
   1166c:	d88007c5 	stb	r2,31(sp)
   11670:	b8800117 	ldw	r2,4(r23)
   11674:	01c00044 	movi	r7,1
   11678:	d98007c4 	addi	r6,sp,31
   1167c:	b80b883a 	mov	r5,r23
   11680:	8009883a 	mov	r4,r16
   11684:	103ee83a 	callr	r2
   11688:	103f2d1e 	bne	r2,zero,11340 <___svfprintf_internal_r+0xe0>
   1168c:	b5800044 	addi	r22,r22,1
   11690:	003fc706 	br	115b0 <___svfprintf_internal_r+0x350>
   11694:	40bfffc3 	ldbu	r2,-1(r8)
   11698:	01c00044 	movi	r7,1
   1169c:	423fffc4 	addi	r8,r8,-1
   116a0:	d88007c5 	stb	r2,31(sp)
   116a4:	b8800117 	ldw	r2,4(r23)
   116a8:	d98007c4 	addi	r6,sp,31
   116ac:	b80b883a 	mov	r5,r23
   116b0:	8009883a 	mov	r4,r16
   116b4:	da000315 	stw	r8,12(sp)
   116b8:	103ee83a 	callr	r2
   116bc:	da000317 	ldw	r8,12(sp)
   116c0:	103fbf26 	beq	r2,zero,115c0 <___svfprintf_internal_r+0x360>
   116c4:	003f1e06 	br	11340 <___svfprintf_internal_r+0xe0>
   116c8:	88800090 	cmplti	r2,r17,2
   116cc:	10000a1e 	bne	r2,zero,116f8 <___svfprintf_internal_r+0x498>
   116d0:	8d7fffc4 	addi	r21,r17,-1
   116d4:	a80f883a 	mov	r7,r21
   116d8:	01800804 	movi	r6,32
   116dc:	b80b883a 	mov	r5,r23
   116e0:	8009883a 	mov	r4,r16
   116e4:	da000315 	stw	r8,12(sp)
   116e8:	00111f40 	call	111f4 <print_repeat>
   116ec:	da000317 	ldw	r8,12(sp)
   116f0:	103f131e 	bne	r2,zero,11340 <___svfprintf_internal_r+0xe0>
   116f4:	b56d883a 	add	r22,r22,r21
   116f8:	40800017 	ldw	r2,0(r8)
   116fc:	01c00044 	movi	r7,1
   11700:	d9800804 	addi	r6,sp,32
   11704:	d8800805 	stb	r2,32(sp)
   11708:	b8800117 	ldw	r2,4(r23)
   1170c:	b80b883a 	mov	r5,r23
   11710:	8009883a 	mov	r4,r16
   11714:	45400104 	addi	r21,r8,4
   11718:	103ee83a 	callr	r2
   1171c:	103f081e 	bne	r2,zero,11340 <___svfprintf_internal_r+0xe0>
   11720:	b5800044 	addi	r22,r22,1
   11724:	a811883a 	mov	r8,r21
   11728:	003ee806 	br	112cc <___svfprintf_internal_r+0x6c>
   1172c:	d8000215 	stw	zero,8(sp)
   11730:	d8000115 	stw	zero,4(sp)
   11734:	d8000015 	stw	zero,0(sp)
   11738:	04c00044 	movi	r19,1
   1173c:	05000284 	movi	r20,10
   11740:	04bfffc4 	movi	r18,-1
   11744:	047fffc4 	movi	r17,-1
   11748:	00800044 	movi	r2,1
   1174c:	003edf06 	br	112cc <___svfprintf_internal_r+0x6c>
   11750:	00800044 	movi	r2,1
   11754:	d8800015 	stw	r2,0(sp)
   11758:	003eeb06 	br	11308 <___svfprintf_internal_r+0xa8>
   1175c:	00800044 	movi	r2,1
   11760:	d8800115 	stw	r2,4(sp)
   11764:	008000c4 	movi	r2,3
   11768:	003ed806 	br	112cc <___svfprintf_internal_r+0x6c>
   1176c:	05000204 	movi	r20,8
   11770:	40800104 	addi	r2,r8,4
   11774:	d8800415 	stw	r2,16(sp)
   11778:	45400017 	ldw	r21,0(r8)
   1177c:	0027883a 	mov	r19,zero
   11780:	0015883a 	mov	r10,zero
   11784:	003f6206 	br	11510 <___svfprintf_internal_r+0x2b0>

00011788 <__vfprintf_internal_unused>:
   11788:	00800074 	movhi	r2,1
   1178c:	300f883a 	mov	r7,r6
   11790:	280d883a 	mov	r6,r5
   11794:	200b883a 	mov	r5,r4
   11798:	11086417 	ldw	r4,8592(r2)
   1179c:	00112601 	jmpi	11260 <___svfprintf_internal_r>

000117a0 <memcpy>:
   117a0:	2005883a 	mov	r2,r4
   117a4:	0007883a 	mov	r3,zero
   117a8:	30c0011e 	bne	r6,r3,117b0 <memcpy+0x10>
   117ac:	f800283a 	ret
   117b0:	28cf883a 	add	r7,r5,r3
   117b4:	39c00003 	ldbu	r7,0(r7)
   117b8:	10c9883a 	add	r4,r2,r3
   117bc:	18c00044 	addi	r3,r3,1
   117c0:	21c00005 	stb	r7,0(r4)
   117c4:	003ff806 	br	117a8 <memcpy+0x8>

000117c8 <_malloc_usable_size_r>:
   117c8:	28ffff17 	ldw	r3,-4(r5)
   117cc:	18bfff04 	addi	r2,r3,-4
   117d0:	1800030e 	bge	r3,zero,117e0 <_malloc_usable_size_r+0x18>
   117d4:	288b883a 	add	r5,r5,r2
   117d8:	28c00017 	ldw	r3,0(r5)
   117dc:	10c5883a 	add	r2,r2,r3
   117e0:	f800283a 	ret

000117e4 <strlen>:
   117e4:	2005883a 	mov	r2,r4
   117e8:	10c00007 	ldb	r3,0(r2)
   117ec:	1800021e 	bne	r3,zero,117f8 <strlen+0x14>
   117f0:	1105c83a 	sub	r2,r2,r4
   117f4:	f800283a 	ret
   117f8:	10800044 	addi	r2,r2,1
   117fc:	003ffa06 	br	117e8 <strlen+0x4>

00011800 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   11800:	00800074 	movhi	r2,1
   11804:	11c84f17 	ldw	r7,8508(r2)
{
   11808:	defffe04 	addi	sp,sp,-8
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   1180c:	01000074 	movhi	r4,1
   11810:	01800044 	movi	r6,1
   11814:	d94000c4 	addi	r5,sp,3
   11818:	21086704 	addi	r4,r4,8604
{
   1181c:	dfc00115 	stw	ra,4(sp)
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   11820:	0011bf80 	call	11bf8 <altera_avalon_jtag_uart_read>
   11824:	0080040e 	bge	zero,r2,11838 <alt_getchar+0x38>
        return -1;
    }
    return c;
   11828:	d88000c7 	ldb	r2,3(sp)
#else
    return getchar();
#endif
#endif
}
   1182c:	dfc00117 	ldw	ra,4(sp)
   11830:	dec00204 	addi	sp,sp,8
   11834:	f800283a 	ret
        return -1;
   11838:	00bfffc4 	movi	r2,-1
   1183c:	003ffb06 	br	1182c <alt_getchar+0x2c>

00011840 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11840:	20800828 	cmpgeui	r2,r4,32
   11844:	1000201e 	bne	r2,zero,118c8 <alt_irq_register+0x88>
  NIOS2_READ_STATUS (context);
   11848:	000f303a 	rdctl	r7,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1184c:	00ffff84 	movi	r3,-2
   11850:	38c4703a 	and	r2,r7,r3
   11854:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   11858:	201090fa 	slli	r8,r4,3
   1185c:	00800074 	movhi	r2,1
   11860:	1088de04 	addi	r2,r2,9080
   11864:	1205883a 	add	r2,r2,r8
   11868:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   1186c:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11870:	00800044 	movi	r2,1
   11874:	1108983a 	sll	r4,r2,r4
   11878:	30000c26 	beq	r6,zero,118ac <alt_irq_register+0x6c>
  NIOS2_READ_STATUS (context);
   1187c:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11880:	10c6703a 	and	r3,r2,r3
   11884:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11888:	d0e07617 	ldw	r3,-32296(gp)
   1188c:	20c8b03a 	or	r4,r4,r3
  alt_irq_active &= ~(1 << id);
   11890:	d1207615 	stw	r4,-32296(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11894:	d0e07617 	ldw	r3,-32296(gp)
   11898:	180170fa 	wrctl	ienable,r3
  NIOS2_WRITE_STATUS (context);
   1189c:	1001703a 	wrctl	status,r2
   118a0:	3801703a 	wrctl	status,r7
   118a4:	0005883a 	mov	r2,zero
}
   118a8:	f800283a 	ret
  NIOS2_READ_STATUS (context);
   118ac:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118b0:	10c6703a 	and	r3,r2,r3
   118b4:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
   118b8:	d0e07617 	ldw	r3,-32296(gp)
   118bc:	0108303a 	nor	r4,zero,r4
   118c0:	20c8703a 	and	r4,r4,r3
   118c4:	003ff206 	br	11890 <alt_irq_register+0x50>
  int rc = -EINVAL;  
   118c8:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }
  return rc; 
}
   118cc:	f800283a 	ret

000118d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   118d0:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   118d4:	00800074 	movhi	r2,1
   118d8:	00c00074 	movhi	r3,1
   118dc:	dfc00015 	stw	ra,0(sp)
   118e0:	10880904 	addi	r2,r2,8228
   118e4:	18c86e04 	addi	r3,r3,8632
   118e8:	10c00326 	beq	r2,r3,118f8 <alt_load+0x28>
  {
    while( to != end )
   118ec:	01000074 	movhi	r4,1
   118f0:	21086e04 	addi	r4,r4,8632
   118f4:	1100141e 	bne	r2,r4,11948 <alt_load+0x78>
  if (to != from)
   118f8:	00800074 	movhi	r2,1
   118fc:	00c00074 	movhi	r3,1
   11900:	10800804 	addi	r2,r2,32
   11904:	18c00804 	addi	r3,r3,32
   11908:	10c00326 	beq	r2,r3,11918 <alt_load+0x48>
    while( to != end )
   1190c:	01000074 	movhi	r4,1
   11910:	21006004 	addi	r4,r4,384
   11914:	1100111e 	bne	r2,r4,1195c <alt_load+0x8c>
  if (to != from)
   11918:	00800074 	movhi	r2,1
   1191c:	00c00074 	movhi	r3,1
   11920:	1087e004 	addi	r2,r2,8064
   11924:	18c7e004 	addi	r3,r3,8064
   11928:	10c00326 	beq	r2,r3,11938 <alt_load+0x68>
    while( to != end )
   1192c:	01000074 	movhi	r4,1
   11930:	21080904 	addi	r4,r4,8228
   11934:	11000e1e 	bne	r2,r4,11970 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11938:	0011dec0 	call	11dec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1193c:	dfc00017 	ldw	ra,0(sp)
   11940:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   11944:	0011ed41 	jmpi	11ed4 <alt_icache_flush_all>
    {
      *to++ = *from++;
   11948:	19400017 	ldw	r5,0(r3)
   1194c:	10800104 	addi	r2,r2,4
   11950:	18c00104 	addi	r3,r3,4
   11954:	117fff15 	stw	r5,-4(r2)
   11958:	003fe606 	br	118f4 <alt_load+0x24>
   1195c:	19400017 	ldw	r5,0(r3)
   11960:	10800104 	addi	r2,r2,4
   11964:	18c00104 	addi	r3,r3,4
   11968:	117fff15 	stw	r5,-4(r2)
   1196c:	003fe906 	br	11914 <alt_load+0x44>
   11970:	19400017 	ldw	r5,0(r3)
   11974:	10800104 	addi	r2,r2,4
   11978:	18c00104 	addi	r3,r3,4
   1197c:	117fff15 	stw	r5,-4(r2)
   11980:	003fec06 	br	11934 <alt_load+0x64>

00011984 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11984:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11988:	0009883a 	mov	r4,zero
{
   1198c:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   11990:	0011bc80 	call	11bc8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11994:	0011be80 	call	11be8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11998:	d1a07717 	ldw	r6,-32292(gp)
   1199c:	d1607817 	ldw	r5,-32288(gp)
   119a0:	d1207917 	ldw	r4,-32284(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   119a4:	dfc00017 	ldw	ra,0(sp)
   119a8:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   119ac:	00107c01 	jmpi	107c0 <main>

000119b0 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
   119b0:	f800283a 	ret

000119b4 <__malloc_unlock>:
   119b4:	f800283a 	ret

000119b8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   119b8:	defff704 	addi	sp,sp,-36
   119bc:	2005883a 	mov	r2,r4
   119c0:	dfc00515 	stw	ra,20(sp)
   119c4:	dd000415 	stw	r20,16(sp)
   119c8:	dcc00315 	stw	r19,12(sp)
   119cc:	dc800215 	stw	r18,8(sp)
   119d0:	dc400115 	stw	r17,4(sp)
   119d4:	dc000015 	stw	r16,0(sp)
   119d8:	d9400615 	stw	r5,24(sp)
   119dc:	d9800715 	stw	r6,28(sp)
   119e0:	d9c00815 	stw	r7,32(sp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   119e4:	048003c4 	movi	r18,15
	va_start(args, fmt);
   119e8:	dc000604 	addi	r16,sp,24
    while ((c = *w++) != 0)
   119ec:	11000007 	ldb	r4,0(r2)
   119f0:	2000081e 	bne	r4,zero,11a14 <alt_printf+0x5c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   119f4:	dfc00517 	ldw	ra,20(sp)
   119f8:	dd000417 	ldw	r20,16(sp)
   119fc:	dcc00317 	ldw	r19,12(sp)
   11a00:	dc800217 	ldw	r18,8(sp)
   11a04:	dc400117 	ldw	r17,4(sp)
   11a08:	dc000017 	ldw	r16,0(sp)
   11a0c:	dec00904 	addi	sp,sp,36
   11a10:	f800283a 	ret
        if (c != '%')
   11a14:	20c00960 	cmpeqi	r3,r4,37
   11a18:	1800031e 	bne	r3,zero,11a28 <alt_printf+0x70>
    while ((c = *w++) != 0)
   11a1c:	14c00044 	addi	r19,r2,1
                        alt_putchar('0');
   11a20:	0011af80 	call	11af8 <alt_putchar>
                        continue;
   11a24:	00000d06 	br	11a5c <alt_printf+0xa4>
            if ((c = *w++) != 0)
   11a28:	14c00084 	addi	r19,r2,2
   11a2c:	10800047 	ldb	r2,1(r2)
   11a30:	103ff026 	beq	r2,zero,119f4 <alt_printf+0x3c>
                if (c == '%')
   11a34:	10c00958 	cmpnei	r3,r2,37
   11a38:	1800021e 	bne	r3,zero,11a44 <alt_printf+0x8c>
                    alt_putchar(c);
   11a3c:	01000944 	movi	r4,37
   11a40:	003ff706 	br	11a20 <alt_printf+0x68>
                else if (c == 'c')
   11a44:	10c018d8 	cmpnei	r3,r2,99
   11a48:	1800061e 	bne	r3,zero,11a64 <alt_printf+0xac>
                    alt_putchar(v);
   11a4c:	81000017 	ldw	r4,0(r16)
                    int v = va_arg(args, int);
   11a50:	84400104 	addi	r17,r16,4
   11a54:	8821883a 	mov	r16,r17
                    alt_putchar(v);
   11a58:	0011af80 	call	11af8 <alt_putchar>
                    int v = va_arg(args, int);
   11a5c:	9805883a 	mov	r2,r19
   11a60:	003fe206 	br	119ec <alt_printf+0x34>
                else if (c == 'x')
   11a64:	10c01e18 	cmpnei	r3,r2,120
   11a68:	18001a1e 	bne	r3,zero,11ad4 <alt_printf+0x11c>
                    unsigned long v = va_arg(args, unsigned long);
   11a6c:	85000017 	ldw	r20,0(r16)
   11a70:	84000104 	addi	r16,r16,4
                    if (v == 0)
   11a74:	a000131e 	bne	r20,zero,11ac4 <alt_printf+0x10c>
                        alt_putchar('0');
   11a78:	01000c04 	movi	r4,48
   11a7c:	003fe806 	br	11a20 <alt_printf+0x68>
                        digit_shift -= 4;
   11a80:	8c7fff04 	addi	r17,r17,-4
                    while (!(v & (0xF << digit_shift)))
   11a84:	9444983a 	sll	r2,r18,r17
   11a88:	1504703a 	and	r2,r2,r20
   11a8c:	103ffc26 	beq	r2,zero,11a80 <alt_printf+0xc8>
                    for (; digit_shift >= 0; digit_shift -= 4)
   11a90:	883ff216 	blt	r17,zero,11a5c <alt_printf+0xa4>
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   11a94:	9448983a 	sll	r4,r18,r17
   11a98:	2508703a 	and	r4,r4,r20
   11a9c:	2448d83a 	srl	r4,r4,r17
                        if (digit <= 9)
   11aa0:	208002a8 	cmpgeui	r2,r4,10
   11aa4:	1000091e 	bne	r2,zero,11acc <alt_printf+0x114>
                            c = '0' + digit;
   11aa8:	21000c04 	addi	r4,r4,48
                        alt_putchar(c);
   11aac:	21003fcc 	andi	r4,r4,255
   11ab0:	2100201c 	xori	r4,r4,128
   11ab4:	213fe004 	addi	r4,r4,-128
   11ab8:	0011af80 	call	11af8 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   11abc:	8c7fff04 	addi	r17,r17,-4
   11ac0:	003ff306 	br	11a90 <alt_printf+0xd8>
                    digit_shift = 28;
   11ac4:	04400704 	movi	r17,28
   11ac8:	003fee06 	br	11a84 <alt_printf+0xcc>
                            c = 'a' + digit - 10;
   11acc:	210015c4 	addi	r4,r4,87
   11ad0:	003ff606 	br	11aac <alt_printf+0xf4>
                else if (c == 's')
   11ad4:	10801cd8 	cmpnei	r2,r2,115
   11ad8:	103fe01e 	bne	r2,zero,11a5c <alt_printf+0xa4>
                    char *s = va_arg(args, char *);
   11adc:	84400017 	ldw	r17,0(r16)
   11ae0:	84000104 	addi	r16,r16,4
                    while(*s)
   11ae4:	89000007 	ldb	r4,0(r17)
   11ae8:	203fdc26 	beq	r4,zero,11a5c <alt_printf+0xa4>
                      alt_putchar(*s++);
   11aec:	8c400044 	addi	r17,r17,1
   11af0:	0011af80 	call	11af8 <alt_putchar>
   11af4:	003ffb06 	br	11ae4 <alt_printf+0x12c>

00011af8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11af8:	defffd04 	addi	sp,sp,-12
   11afc:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   11b00:	d90000c5 	stb	r4,3(sp)
{
   11b04:	2021883a 	mov	r16,r4

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11b08:	01000074 	movhi	r4,1
   11b0c:	000f883a 	mov	r7,zero
   11b10:	01800044 	movi	r6,1
   11b14:	d94000c4 	addi	r5,sp,3
   11b18:	21086704 	addi	r4,r4,8604
{
   11b1c:	dfc00215 	stw	ra,8(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11b20:	0011c500 	call	11c50 <altera_avalon_jtag_uart_write>
   11b24:	10bfffd8 	cmpnei	r2,r2,-1
   11b28:	1000011e 	bne	r2,zero,11b30 <alt_putchar+0x38>
        return -1;
   11b2c:	043fffc4 	movi	r16,-1
    return c;
#else
    return putchar(c);
#endif
#endif
}
   11b30:	8005883a 	mov	r2,r16
   11b34:	dfc00217 	ldw	ra,8(sp)
   11b38:	dc000117 	ldw	r16,4(sp)
   11b3c:	dec00304 	addi	sp,sp,12
   11b40:	f800283a 	ret

00011b44 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   11b44:	defffe04 	addi	sp,sp,-8
   11b48:	dc000015 	stw	r16,0(sp)
   11b4c:	dfc00115 	stw	ra,4(sp)
   11b50:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11b54:	00117e40 	call	117e4 <strlen>
   11b58:	01000074 	movhi	r4,1
   11b5c:	000f883a 	mov	r7,zero
   11b60:	100d883a 	mov	r6,r2
   11b64:	800b883a 	mov	r5,r16
   11b68:	21086704 	addi	r4,r4,8604
#else
    return fputs(str, stdout);
#endif
#endif
}
   11b6c:	dfc00117 	ldw	ra,4(sp)
   11b70:	dc000017 	ldw	r16,0(sp)
   11b74:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11b78:	0011c501 	jmpi	11c50 <altera_avalon_jtag_uart_write>

00011b7c <sbrk>:
  NIOS2_READ_STATUS (context);
   11b7c:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b80:	00bfff84 	movi	r2,-2
   11b84:	1884703a 	and	r2,r3,r2
   11b88:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11b8c:	d0a00317 	ldw	r2,-32756(gp)
   11b90:	017fff04 	movi	r5,-4
   11b94:	108000c4 	addi	r2,r2,3
   11b98:	1144703a 	and	r2,r2,r5
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   11b9c:	014000b4 	movhi	r5,2
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11ba0:	d0a00315 	stw	r2,-32756(gp)
  if ((heap_end + incr) > __alt_heap_limit) {
   11ba4:	1109883a 	add	r4,r2,r4
   11ba8:	29400004 	addi	r5,r5,0
   11bac:	2900032e 	bgeu	r5,r4,11bbc <sbrk+0x40>
  NIOS2_WRITE_STATUS (context);
   11bb0:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   11bb4:	00bfffc4 	movi	r2,-1
   11bb8:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   11bbc:	d1200315 	stw	r4,-32756(gp)
   11bc0:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   11bc4:	f800283a 	ret

00011bc8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11bc8:	deffff04 	addi	sp,sp,-4
   11bcc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11bd0:	0011ed80 	call	11ed8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11bd4:	00800044 	movi	r2,1
   11bd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11bdc:	dfc00017 	ldw	ra,0(sp)
   11be0:	dec00104 	addi	sp,sp,4
   11be4:	f800283a 	ret

00011be8 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11be8:	01000074 	movhi	r4,1
   11bec:	d1600604 	addi	r5,gp,-32744
   11bf0:	21084204 	addi	r4,r4,8456
   11bf4:	0011df81 	jmpi	11df8 <alt_dev_llist_insert>

00011bf8 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   11bf8:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   11bfc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   11c00:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   11c04:	3a10000c 	andi	r8,r7,16384
  while (ptr < end)
   11c08:	11800536 	bltu	r2,r6,11c20 <altera_avalon_jtag_uart_read+0x28>
      break;   
    
  }

  if (ptr != buffer)
   11c0c:	11400b1e 	bne	r2,r5,11c3c <altera_avalon_jtag_uart_read+0x44>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   11c10:	39d0000c 	andi	r7,r7,16384
   11c14:	38000c1e 	bne	r7,zero,11c48 <altera_avalon_jtag_uart_read+0x50>
    return -EWOULDBLOCK;
  else
    return -EIO;
   11c18:	00bffec4 	movi	r2,-5
}
   11c1c:	f800283a 	ret
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11c20:	20c00037 	ldwio	r3,0(r4)
    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   11c24:	1a60000c 	andi	r9,r3,32768
   11c28:	48000326 	beq	r9,zero,11c38 <altera_avalon_jtag_uart_read+0x40>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11c2c:	10c00005 	stb	r3,0(r2)
   11c30:	10800044 	addi	r2,r2,1
   11c34:	003ff406 	br	11c08 <altera_avalon_jtag_uart_read+0x10>
    else if (ptr != buffer)
   11c38:	11400226 	beq	r2,r5,11c44 <altera_avalon_jtag_uart_read+0x4c>
    return ptr - buffer;
   11c3c:	1145c83a 	sub	r2,r2,r5
   11c40:	f800283a 	ret
    else if(flags & O_NONBLOCK)
   11c44:	403ff026 	beq	r8,zero,11c08 <altera_avalon_jtag_uart_read+0x10>
    return -EWOULDBLOCK;
   11c48:	00bffd44 	movi	r2,-11
   11c4c:	f800283a 	ret

00011c50 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11c50:	21000017 	ldw	r4,0(r4)
{
   11c54:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   11c58:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   11c5c:	29800136 	bltu	r5,r6,11c64 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   11c60:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11c64:	20c00137 	ldwio	r3,4(r4)
   11c68:	18ffffec 	andhi	r3,r3,65535
   11c6c:	183ffb26 	beq	r3,zero,11c5c <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11c70:	28c00007 	ldb	r3,0(r5)
   11c74:	29400044 	addi	r5,r5,1
   11c78:	20c00035 	stwio	r3,0(r4)
   11c7c:	003ff706 	br	11c5c <altera_avalon_jtag_uart_write+0xc>

00011c80 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11c80:	d1600604 	addi	r5,gp,-32744
   11c84:	0011e641 	jmpi	11e64 <alt_find_dev>

00011c88 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11c88:	20800a17 	ldw	r2,40(r4)
   11c8c:	10800023 	ldbuio	r2,0(r2)
   11c90:	28800005 	stb	r2,0(r5)

	return 0;
}
   11c94:	0005883a 	mov	r2,zero
   11c98:	f800283a 	ret

00011c9c <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11c9c:	20800a17 	ldw	r2,40(r4)
   11ca0:	29400fcc 	andi	r5,r5,63
   11ca4:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11ca8:	20800a17 	ldw	r2,40(r4)
   11cac:	10800063 	ldbuio	r2,1(r2)
   11cb0:	30800005 	stb	r2,0(r6)

	return 0;
}
   11cb4:	0005883a 	mov	r2,zero
   11cb8:	f800283a 	ret

00011cbc <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11cbc:	20800a17 	ldw	r2,40(r4)
   11cc0:	29400fcc 	andi	r5,r5,63
   11cc4:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11cc8:	20800a17 	ldw	r2,40(r4)
   11ccc:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11cd0:	0005883a 	mov	r2,zero
   11cd4:	f800283a 	ret

00011cd8 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11cd8:	20800a17 	ldw	r2,40(r4)
   11cdc:	00c00c84 	movi	r3,50
   11ce0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11ce4:	20800a17 	ldw	r2,40(r4)
   11ce8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11cec:	00c00cc4 	movi	r3,51
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11cf0:	10803fcc 	andi	r2,r2,255
   11cf4:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11cf8:	20800a17 	ldw	r2,40(r4)
   11cfc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11d00:	20800a17 	ldw	r2,40(r4)
   11d04:	10800063 	ldbuio	r2,1(r2)
   11d08:	10803fcc 	andi	r2,r2,255
   11d0c:	28c00017 	ldw	r3,0(r5)
   11d10:	1004923a 	slli	r2,r2,8
   11d14:	10c5883a 	add	r2,r2,r3

	if (*(x_axis) & 0x00008000)
   11d18:	10e0000c 	andi	r3,r2,32768
   11d1c:	1800031e 	bne	r3,zero,11d2c <alt_up_accelerometer_spi_read_x_axis+0x54>
	{
		*(x_axis) |= 0xFFFF0000;
   11d20:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11d24:	0005883a 	mov	r2,zero
   11d28:	f800283a 	ret
		*(x_axis) |= 0xFFFF0000;
   11d2c:	10bffff4 	orhi	r2,r2,65535
   11d30:	003ffb06 	br	11d20 <alt_up_accelerometer_spi_read_x_axis+0x48>

00011d34 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d34:	20800a17 	ldw	r2,40(r4)
   11d38:	00c00d04 	movi	r3,52
   11d3c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11d40:	20800a17 	ldw	r2,40(r4)
   11d44:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d48:	00c00d44 	movi	r3,53
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11d4c:	10803fcc 	andi	r2,r2,255
   11d50:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d54:	20800a17 	ldw	r2,40(r4)
   11d58:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11d5c:	20800a17 	ldw	r2,40(r4)
   11d60:	10800063 	ldbuio	r2,1(r2)
   11d64:	10803fcc 	andi	r2,r2,255
   11d68:	28c00017 	ldw	r3,0(r5)
   11d6c:	1004923a 	slli	r2,r2,8
   11d70:	10c5883a 	add	r2,r2,r3

	if (*(y_axis) & 0x00008000)
   11d74:	10e0000c 	andi	r3,r2,32768
   11d78:	1800031e 	bne	r3,zero,11d88 <alt_up_accelerometer_spi_read_y_axis+0x54>
	{
		*(y_axis) |= 0xFFFF0000;
   11d7c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11d80:	0005883a 	mov	r2,zero
   11d84:	f800283a 	ret
		*(y_axis) |= 0xFFFF0000;
   11d88:	10bffff4 	orhi	r2,r2,65535
   11d8c:	003ffb06 	br	11d7c <alt_up_accelerometer_spi_read_y_axis+0x48>

00011d90 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d90:	20800a17 	ldw	r2,40(r4)
   11d94:	00c00d84 	movi	r3,54
   11d98:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11d9c:	20800a17 	ldw	r2,40(r4)
   11da0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11da4:	00c00dc4 	movi	r3,55
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11da8:	10803fcc 	andi	r2,r2,255
   11dac:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11db0:	20800a17 	ldw	r2,40(r4)
   11db4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11db8:	20800a17 	ldw	r2,40(r4)
   11dbc:	10800063 	ldbuio	r2,1(r2)
   11dc0:	10803fcc 	andi	r2,r2,255
   11dc4:	28c00017 	ldw	r3,0(r5)
   11dc8:	1004923a 	slli	r2,r2,8
   11dcc:	10c5883a 	add	r2,r2,r3

	if (*(z_axis) & 0x00008000)
   11dd0:	10e0000c 	andi	r3,r2,32768
   11dd4:	1800031e 	bne	r3,zero,11de4 <alt_up_accelerometer_spi_read_z_axis+0x54>
	{
		*(z_axis) |= 0xFFFF0000;
   11dd8:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11ddc:	0005883a 	mov	r2,zero
   11de0:	f800283a 	ret
		*(z_axis) |= 0xFFFF0000;
   11de4:	10bffff4 	orhi	r2,r2,65535
   11de8:	003ffb06 	br	11dd8 <alt_up_accelerometer_spi_read_z_axis+0x48>

00011dec <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11dec:	f800283a 	ret

00011df0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11df0:	3005883a 	mov	r2,r6
  return len;
}
   11df4:	f800283a 	ret

00011df8 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11df8:	20000226 	beq	r4,zero,11e04 <alt_dev_llist_insert+0xc>
   11dfc:	20800217 	ldw	r2,8(r4)
   11e00:	10000b1e 	bne	r2,zero,11e30 <alt_dev_llist_insert+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11e04:	d0a00a17 	ldw	r2,-32728(gp)
   11e08:	10001126 	beq	r2,zero,11e50 <alt_dev_llist_insert+0x58>
{
   11e0c:	deffff04 	addi	sp,sp,-4
   11e10:	dfc00015 	stw	ra,0(sp)
   11e14:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
   11e18:	00c00584 	movi	r3,22
   11e1c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11e20:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11e24:	dfc00017 	ldw	ra,0(sp)
   11e28:	dec00104 	addi	sp,sp,4
   11e2c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11e30:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
   11e34:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   11e38:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11e3c:	28800017 	ldw	r2,0(r5)
   11e40:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11e44:	29000015 	stw	r4,0(r5)
  return 0;  
   11e48:	0005883a 	mov	r2,zero
   11e4c:	f800283a 	ret
   11e50:	d0a07504 	addi	r2,gp,-32300
    ALT_ERRNO = EINVAL;
   11e54:	00c00584 	movi	r3,22
   11e58:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11e5c:	00bffa84 	movi	r2,-22
}
   11e60:	f800283a 	ret

00011e64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11e64:	defffb04 	addi	sp,sp,-20
   11e68:	dcc00315 	stw	r19,12(sp)
   11e6c:	dc800215 	stw	r18,8(sp)
   11e70:	dc400115 	stw	r17,4(sp)
   11e74:	dc000015 	stw	r16,0(sp)
   11e78:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   11e7c:	2c000017 	ldw	r16,0(r5)
{
   11e80:	2027883a 	mov	r19,r4
   11e84:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
   11e88:	00117e40 	call	117e4 <strlen>
   11e8c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11e90:	8440091e 	bne	r16,r17,11eb8 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11e94:	0021883a 	mov	r16,zero
}
   11e98:	8005883a 	mov	r2,r16
   11e9c:	dfc00417 	ldw	ra,16(sp)
   11ea0:	dcc00317 	ldw	r19,12(sp)
   11ea4:	dc800217 	ldw	r18,8(sp)
   11ea8:	dc400117 	ldw	r17,4(sp)
   11eac:	dc000017 	ldw	r16,0(sp)
   11eb0:	dec00504 	addi	sp,sp,20
   11eb4:	f800283a 	ret
    if (!memcmp (next->name, name, len))
   11eb8:	81000217 	ldw	r4,8(r16)
   11ebc:	900d883a 	mov	r6,r18
   11ec0:	980b883a 	mov	r5,r19
   11ec4:	0011f500 	call	11f50 <memcmp>
   11ec8:	103ff326 	beq	r2,zero,11e98 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
   11ecc:	84000017 	ldw	r16,0(r16)
   11ed0:	003fef06 	br	11e90 <alt_find_dev+0x2c>

00011ed4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11ed4:	f800283a 	ret

00011ed8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11ed8:	000170fa 	wrctl	ienable,zero
}
   11edc:	f800283a 	ret

00011ee0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11ee0:	213ffe84 	addi	r4,r4,-6
   11ee4:	20800428 	cmpgeui	r2,r4,16
   11ee8:	1000151e 	bne	r2,zero,11f40 <alt_exception_cause_generated_bad_addr+0x60>
   11eec:	200890ba 	slli	r4,r4,2
   11ef0:	00800074 	movhi	r2,1
   11ef4:	2085883a 	add	r2,r4,r2
   11ef8:	1087c017 	ldw	r2,7936(r2)
   11efc:	1000683a 	jmp	r2
   11f00:	00011f48 	cmpgei	zero,zero,1149
   11f04:	00011f48 	cmpgei	zero,zero,1149
   11f08:	00011f40 	call	11f4 <__alt_mem_onchip_memory-0xee0c>
   11f0c:	00011f40 	call	11f4 <__alt_mem_onchip_memory-0xee0c>
   11f10:	00011f40 	call	11f4 <__alt_mem_onchip_memory-0xee0c>
   11f14:	00011f48 	cmpgei	zero,zero,1149
   11f18:	00011f40 	call	11f4 <__alt_mem_onchip_memory-0xee0c>
   11f1c:	00011f40 	call	11f4 <__alt_mem_onchip_memory-0xee0c>
   11f20:	00011f48 	cmpgei	zero,zero,1149
   11f24:	00011f48 	cmpgei	zero,zero,1149
   11f28:	00011f40 	call	11f4 <__alt_mem_onchip_memory-0xee0c>
   11f2c:	00011f48 	cmpgei	zero,zero,1149
   11f30:	00011f40 	call	11f4 <__alt_mem_onchip_memory-0xee0c>
   11f34:	00011f40 	call	11f4 <__alt_mem_onchip_memory-0xee0c>
   11f38:	00011f40 	call	11f4 <__alt_mem_onchip_memory-0xee0c>
   11f3c:	00011f48 	cmpgei	zero,zero,1149
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11f40:	0005883a 	mov	r2,zero
   11f44:	f800283a 	ret
   11f48:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11f4c:	f800283a 	ret

00011f50 <memcmp>:
   11f50:	0007883a 	mov	r3,zero
   11f54:	30c0021e 	bne	r6,r3,11f60 <memcmp+0x10>
   11f58:	0005883a 	mov	r2,zero
   11f5c:	f800283a 	ret
   11f60:	20c5883a 	add	r2,r4,r3
   11f64:	18c00044 	addi	r3,r3,1
   11f68:	28cf883a 	add	r7,r5,r3
   11f6c:	10800003 	ldbu	r2,0(r2)
   11f70:	39ffffc3 	ldbu	r7,-1(r7)
   11f74:	11fff726 	beq	r2,r7,11f54 <memcmp+0x4>
   11f78:	11c5c83a 	sub	r2,r2,r7
   11f7c:	f800283a 	ret
